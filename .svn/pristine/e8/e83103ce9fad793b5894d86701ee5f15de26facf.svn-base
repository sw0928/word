{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBqB,a;;;;;;;;;;;wCACC;AAClB,WAAK,qBAAL,GAA8B,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAA9B;AACA,aAAO,gBAAP,CAAwB,UAAxB,EAAoC,KAAK,cAAzC,EAAyD,KAAzD;AACA,aAAO,gBAAP,CAAwB,WAAxB,EAAqC,KAAK,cAA1C;AACA,aAAO,gBAAP,CAAwB,MAAxB,EAAgC,KAAK,qBAArC,EAA4D,KAA5D;AACD;;;2CACsB;AACrB,aAAO,mBAAP,CAA2B,UAA3B,EAAuC,KAAK,cAA5C;AACA,aAAO,mBAAP,CAA2B,WAA3B,EAAwC,KAAK,cAA7C;AACA,aAAO,mBAAP,CAA2B,MAA3B,EAAmC,KAAK,qBAAxC;AACD;;;iCACY;AACX,WAAK,IAAL,CAAU,UAAV,CAAqB,KAArB;AACD;;;mCACc,C,EAAG;AAChB,QAAE,eAAF;AACA,QAAE,cAAF;AACD;;;qCACgB,C,EAAG;;AAElB,WAAK,cAAL,CAAoB,CAApB;;;AAGA,UAAM,WAAW,EAAE,MAAF,CAAS,KAAT,IAAkB,EAAE,YAAF,CAAe,KAAlD;;;AAGA,UAAI,OAAO,KAAK,KAAL,CAAW,YAAlB,KAAmC,UAAvC,EAAmD;AACjD,YAAM,QAAQ,EAAd;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,MAA7B,EAAqC,GAArC,EAA0C;AACxC,gBAAM,IAAN,CAAW,SAAS,CAAT,CAAX;AACD;AACD,aAAK,KAAL,CAAW,YAAX,CAAwB,CAAxB,EAA2B,KAA3B;AACD;AACF;;;6BACQ;AACP,aACE;AAAA;QAAA,EAAK,WAAU,gBAAf;QACE;AACE,gBAAK,MADP;AAEE,eAAI,YAFN;AAGE,iBAAO,EAAC,SAAS,MAAV,EAHT;AAIE,oBAAU,KAAK,KAAL,CAAW,QAJvB;AAKE,oBAAU,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B;AALZ,UADF;QAQG,KAAK,KAAL,CAAW;AARd,OADF;AAYD;;;;;;kBAhDkB,a;;;AAmDrB,cAAc,YAAd,GAA6B;AAC3B,gBAAc,wBAAY,CAAE,CADD;AAE3B,YAAU;AAFiB,CAA7B","file":"index.js","sourcesContent":["import React, { Component } from 'react';\n\n/**\n * A React component that adds drag-and-drop functionality to the\n * window the component resides in.  It also exposes a chooseFile()\n * function that will trigger the browsers choose local file functionality\n * from an <input type=\"file\" />\n * @class FileProcessor\n * @extends React.Component\n * @example\n * const self = this;\n * <FileProcessor ref=\"myFileProcessor\" onFileSelect={(e, files) => {\n *   console.log(e, files);\n * }} />\n * <Button onClick={()=>{self.refs.myFileProcessor.chooseFile();}}>Open</Button>\n */\nexport default class FileProcessor extends Component {\n  componentDidMount() {\n    this.boundHandleFileSelect =  this.handleFileSelect.bind(this);\n    window.addEventListener('dragover', this.handleFileDrag, false);\n    window.addEventListener('dragleave', this.handleFileDrag);\n    window.addEventListener('drop', this.boundHandleFileSelect, false);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('dragover', this.handleFileDrag);\n    window.removeEventListener('dragleave', this.handleFileDrag);\n    window.removeEventListener('drop', this.boundHandleFileSelect);\n  }\n  chooseFile() {\n    this.refs.fileButton.click();\n  }\n  handleFileDrag(e) {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n  handleFileSelect(e) {\n    // cancel event\n    this.handleFileDrag(e);\n\n    // fetch FileList object\n    const fileList = e.target.files || e.dataTransfer.files;\n\n    // call onFileSelect\n    if (typeof this.props.onFileSelect === 'function') {\n      const files = [];\n      for (let i = 0; i < fileList.length; i++) {\n        files.push(fileList[i]);\n      }\n      this.props.onFileSelect(e, files);\n    }\n  }\n  render() {\n    return (\n      <div className=\"file-processor\">\n        <input\n          type=\"file\"\n          ref=\"fileButton\"\n          style={{display: 'none'}}\n          multiple={this.props.multiple}\n          onChange={this.handleFileSelect.bind(this)}\n        />\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nFileProcessor.defaultProps = {\n  onFileSelect: function () {},\n  multiple: false\n};\n"],"sourceRoot":"/source/"}