(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/radu/code/react-flex/node_modules/browserify/lib/_empty.js":[function(require,module,exports){

},{}],"/home/radu/code/react-flex/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],"/home/radu/code/react-flex/node_modules/i-s/index.js":[function(require,module,exports){
module.exports = require('./src')
},{"./src":"/home/radu/code/react-flex/node_modules/i-s/src/index.js"}],"/home/radu/code/react-flex/node_modules/i-s/src/arguments.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Arguments]' || !!value.callee
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/array.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return Array.isArray(value)
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/boolean.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return typeof value == 'boolean'
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/date.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Date]'
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/float.js":[function(require,module,exports){
'use strict'

var number = require('./number')

module.exports = function(value){
    return number(value) && (value === parseFloat(value, 10)) && !(value === parseInt(value, 10))
}
},{"./number":"/home/radu/code/react-flex/node_modules/i-s/src/number.js"}],"/home/radu/code/react-flex/node_modules/i-s/src/function.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Function]'
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/index.js":[function(require,module,exports){
'use strict'

module.exports = {
    'numeric'  : require('./numeric'),
    'number'   : require('./number'),
    'int'      : require('./int'),
    'float'    : require('./float'),
    'string'   : require('./string'),
    'function' : require('./function'),
    'object'   : require('./object'),
    'arguments': require('./arguments'),
    'boolean'  : require('./boolean'),
    'date'     : require('./date'),
    'regexp'   : require('./regexp'),
    'array'    : require('./array')
}
},{"./arguments":"/home/radu/code/react-flex/node_modules/i-s/src/arguments.js","./array":"/home/radu/code/react-flex/node_modules/i-s/src/array.js","./boolean":"/home/radu/code/react-flex/node_modules/i-s/src/boolean.js","./date":"/home/radu/code/react-flex/node_modules/i-s/src/date.js","./float":"/home/radu/code/react-flex/node_modules/i-s/src/float.js","./function":"/home/radu/code/react-flex/node_modules/i-s/src/function.js","./int":"/home/radu/code/react-flex/node_modules/i-s/src/int.js","./number":"/home/radu/code/react-flex/node_modules/i-s/src/number.js","./numeric":"/home/radu/code/react-flex/node_modules/i-s/src/numeric.js","./object":"/home/radu/code/react-flex/node_modules/i-s/src/object.js","./regexp":"/home/radu/code/react-flex/node_modules/i-s/src/regexp.js","./string":"/home/radu/code/react-flex/node_modules/i-s/src/string.js"}],"/home/radu/code/react-flex/node_modules/i-s/src/int.js":[function(require,module,exports){
'use strict'

var number = require('./number')

module.exports = function(value){
    return number(value) && (value === parseInt(value, 10))
}
},{"./number":"/home/radu/code/react-flex/node_modules/i-s/src/number.js"}],"/home/radu/code/react-flex/node_modules/i-s/src/number.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return typeof value === 'number' && isFinite(value)
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/numeric.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return !isNaN( parseFloat( value ) ) && isFinite( value )
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/object.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Object]'
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/regexp.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object RegExp]'
}
},{}],"/home/radu/code/react-flex/node_modules/i-s/src/string.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return typeof value == 'string'
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/index.js":[function(require,module,exports){
'use strict'

module.exports = {
   prefixProperties: require('./src/prefixProperties') ,
   object: require('./src/toStyleObject'),
   string: require('./src/toStyleString')
}
},{"./src/prefixProperties":"/home/radu/code/react-flex/node_modules/to-style/src/prefixProperties.js","./src/toStyleObject":"/home/radu/code/react-flex/node_modules/to-style/src/toStyleObject.js","./src/toStyleString":"/home/radu/code/react-flex/node_modules/to-style/src/toStyleString.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/index.js":[function(require,module,exports){
module.exports = {
    toLowerFirst     : require('./src/toLowerFirst'),
    toUpperFirst     : require('./src/toUpperFirst'),
    separate         : require('./src/separate'),
    stripWhitespace  : require('./src/stripWhitespace'),
    compactWhitespace: require('./src/compactWhitespace'),
    camelize         : require('./src/camelize'),
    humanize         : require('./src/humanize'),
    hyphenate        : require('./src/hyphenate'),

    is: require('./src/is')
}
},{"./src/camelize":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/camelize.js","./src/compactWhitespace":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/compactWhitespace.js","./src/humanize":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/humanize.js","./src/hyphenate":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/hyphenate.js","./src/is":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/index.js","./src/separate":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/separate.js","./src/stripWhitespace":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/stripWhitespace.js","./src/toLowerFirst":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/toLowerFirst.js","./src/toUpperFirst":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/toUpperFirst.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/functionally/index.js":[function(require,module,exports){
    /**
     * Utility methods for working with functions.
     * These methods augment the Function prototype.
     *
     * Using {@link #before}
     *
     *      function log(m){
     *          console.log(m)
     *      }
     *
     *      var doLog = function (m){
     *          console.log('LOG ')
     *      }.before(log)
     *
     *      doLog('test')
     *      //will log
     *      //"LOG "
     *      //and then
     *      //"test"
     *
     *
     *
     * Using {@link #bindArgs}:
     *
     *      //returns the sum of all arguments
     *      function add(){
     *          var sum = 0
     *          [].from(arguments).forEach(function(n){
     *              sum += n
     *          })
     *
     *          return sum
     *      }
     *
     *      var add1 = add.bindArgs(1)
     *
     *      add1(2, 3) == 6
     *
     * Using {@link #lockArgs}:
     *
     *      function add(){
     *          var sum = 0
     *          [].from(arguments).forEach(function(n){
     *              sum += n
     *          })
     *
     *          return sum
     *      }
     *
     *      var add1_2   = add.lockArgs(1,2)
     *      var add1_2_3 = add.lockArgs(1,2,3)
     *
     *      add1_2(3,4)  == 3 //args are locked to only be 1 and 2
     *      add1_2_3(6)  == 6 //args are locked to only be 1, 2 and 3
     *
     *
     *
     * Using {@link #compose}:
     *
     *      function multiply(a,b){
     *          return a* b
     *      }
     *
     *      var multiply2 = multiply.curry()(2)
     *
     *      Function.compose(multiply2( add(5,6) )) == multiply2( add(5,6) )
     *
     *
     * @class Function
     */

    var SLICE = Array.prototype.slice

    var composeTwo = function(f, g) {
            return function () {
                return f(g.apply(this, arguments))
            }
        },

        curry = function(fn, n){
            if (typeof n !== 'number'){
                n = fn.length
            }

            function getCurryClosure(prevArgs){

                function curryClosure() {

                    var len  = arguments.length,
                        args = [].concat(prevArgs)

                    if (len){
                        args.push.apply(args, arguments)
                    }

                    if (args.length < n){
                        return getCurryClosure(args)
                    }

                    return fn.apply(this, args)
                }

                return curryClosure
            }

            return getCurryClosure([])
        },

        find = curry(function(fn, target){
            if (typeof target.find == 'function'){
                return target.find(fn)
            }

            if (Array.isArray(target)){
                var i   = 0
                var len = target.length
                var it

                for(; i < len; i++){
                    it = target[i]
                    if (fn(it, i, target)){
                        return it
                    }
                }

                return
            }

            if (typeof target == 'object'){
                var keys = Object.keys(target)
                var i = 0
                var len = keys.length
                var k
                var it

                for( ; i < len; i++){
                    k  = keys[i]
                    it = target[k]

                    if (fn(it, k, target)){
                        return it
                    }
                }
            }
        }),

        bindFunctionsOf = function(obj) {
            Object.keys(obj).forEach(function(k){
                if (typeof obj[k] == 'function'){
                    obj[k] = obj[k].bind(obj)
                }
            })

            return obj
        },

        /*
         * @param {Function...} an enumeration of functions, each consuming the result of the following function.
         *
         * For example: compose(c, b, a)(1,4) == c(b(a(1,4)))
         *
         * @return the result of the first function in the enumeration
         */
        compose = function(){

            var args = arguments
            var len  = args.length
            var i    = 0
            var f    = args[0]

            while (++i < len) {
                f = composeTwo(f, args[i])
            }

            return f
        },

        chain = function(where, fn, secondFn){
            var fns = [
                where === 'before'? secondFn: fn,
                where !== 'before'? secondFn: fn
            ]

            return function(){
                if (where === 'before'){
                    secondFn.apply(this, arguments)
                }

                var result = fn.apply(this, arguments)

                if (where !== 'before'){
                    secondFn.apply(this, arguments)
                }

                return result
            }
        },

        forward = function(fn, scope){
            return fn.bind?
                       fn.bind(scope):
                       function(){
                            return fn.apply(scope, arguments)
                       }
        },

        once = function(fn, scope){
            var called = false,
                result

            return function(){
                if (called){
                    return result
                }

                called = true

                return result = fn.call(scope || this)
            }
        },

        bindArgsArray = function(fn, args){
            return function(){
                var thisArgs = SLICE.call(args || [])

                if (arguments.length){
                    thisArgs.push.apply(thisArgs, arguments)
                }

                return fn.apply(this, thisArgs)
            }
        },

        bindArgs = function(fn){
            return bindArgsArray(fn, SLICE.call(arguments,1))
        },

        lock = function(fn, scope){
            var args = SLICE.call(arguments, 2)

            return function(){
                return fn.apply(scope, args)
            }
        },

        lockArgsArray = function(fn, args){

            return function(){
                if (!Array.isArray(args)){
                    args = SLICE.call(args || [])
                }

                return fn.apply(this, args)
            }
        },

        lockArgs = function(fn){
            return lockArgsArray(fn, SLICE.call(arguments, 1) )
        },

        skipArgs = function(fn, count){
            return function(){
                var args = SLICE.call(arguments, count || 0)

                return fn.apply(this, args)
            }
        },

        intercept = function(interceptedFn, interceptingFn, withStopArg){

            return function(){
                var args    = [].from(arguments),
                    stopArg = { stop: false }

                if (withStopArg){
                    args.push(stopArg)
                }

                var result = interceptingFn.apply(this, args)

                if (withStopArg){
                    if (stopArg.stop === true){
                        return result
                    }

                } else {
                    if (result === false){
                        return result
                    }
                }

                //the interception was not stopped
                return interceptedFn.apply(this, arguments)
            }

        },

        delay = function(fn, delay, scope){

            var delayIsNumber = delay * 1 == delay

            if (arguments.length == 2 && !delayIsNumber){
                scope = delay
                delay = 0
            } else {
                if (!delayIsNumber){
                    delay = 0
                }
            }

            return function(){
                var self = scope || this,
                    args = arguments

                if (delay < 0){
                    fn.apply(self, args)
                    return
                }

                if (delay || !setImmediate){
                    setTimeout(function(){
                        fn.apply(self, args)
                    }, delay)

                } else {
                    setImmediate(function(){
                        fn.apply(self, args)
                    })
                }
            }
        },

        defer = function(fn, scope){
            return delay(fn, 0, scope)
        },

        buffer = function(fn, delay, scope){

            var timeoutId = -1

            return function(){

                var self = scope || this,
                    args = arguments

                if (delay < 0){
                    fn.apply(self, args)
                    return
                }

                var withTimeout = delay || !setImmediate,
                    clearFn = withTimeout?
                                clearTimeout:
                                clearImmediate,
                    setFn   = withTimeout?
                                setTimeout:
                                setImmediate

                if (timeoutId !== -1){
                    clearFn(timeoutId)
                }

                timeoutId = setFn(function(){
                    fn.apply(self, args)
                    self = null
                }, delay)

            }

        },

        throttle = function(fn, delay, scope) {
            var timeoutId = -1,
                self,
                args

            return function () {

                self = scope || this
                args = arguments

                if (timeoutId !== -1) {
                    //the function was called once again in the delay interval
                } else {
                    timeoutId = setTimeout(function () {
                        fn.apply(self, args)

                        self = null
                        timeoutId = -1
                    }, delay)
                }

            }

        },

        maxArgs = function(fn, count){
            return function(){
                return fn.apply(this, SLICE.call(arguments, 0, count))
            }
        },

        spread = function(fn, delay, scope){

            var timeoutId       = -1
            var callCount       = 0
            var executeCount    = 0
            var nextArgs        = {}
            var increaseCounter = true
            var resultingFnUnbound
            var resultingFn

            resultingFn = resultingFnUnbound = function(){

                var args = arguments,
                    self = scope || this

                if (increaseCounter){
                    nextArgs[callCount++] = {args: args, scope: self}
                }

                if (timeoutId !== -1){
                    //the function was called once again in the delay interval
                } else {
                    timeoutId = setTimeout(function(){
                        fn.apply(self, args)

                        timeoutId = -1
                        executeCount++

                        if (callCount !== executeCount){
                            resultingFn = bindArgsArray(resultingFnUnbound, nextArgs[executeCount].args).bind(nextArgs[executeCount].scope)
                            delete nextArgs[executeCount]

                            increaseCounter = false
                            resultingFn.apply(self)
                            increaseCounter = true
                        } else {
                            nextArgs = {}
                        }
                    }, delay)
                }

            }

            return resultingFn
        },

        /*
         * @param {Array} args the array for which to create a cache key
         * @param {Number} [cacheParamNumber] the number of args to use for the cache key. Use this to limit the args that area actually used for the cache key
         */
        getCacheKey = function(args, cacheParamNumber){
            if (cacheParamNumber == null){
                cacheParamNumber = -1
            }

            var i        = 0,
                len      = Math.min(args.length, cacheParamNumber),
                cacheKey = [],
                it

            for ( ; i < len; i++){
                it = args[i]

                if (root.check.isPlainObject(it) || Array.isArray(it)){
                    cacheKey.push(JSON.stringify(it))
                } else {
                    cacheKey.push(String(it))
                }
            }

            return cacheKey.join(', ')
        },

        /*
         * @param {Function} fn - the function to cache results for
         * @param {Number} skipCacheParamNumber - the index of the boolean parameter that makes this function skip the caching and
         * actually return computed results.
         * @param {Function|String} cacheBucketMethod - a function or the name of a method on this object which makes caching distributed across multiple buckets.
         * If given, cached results will be searched into the cache corresponding to this bucket. If no result found, return computed result.
         *
         * For example this param is very useful when a function from a prototype is cached,
         * but we want to return the same cached results only for one object that inherits that proto, not for all objects. Thus, for example for Wes.Element,
         * we use the 'getId' cacheBucketMethod to indicate cached results for one object only.
         * @param {Function} [cacheKeyBuilder] A function to be used to compose the cache key
         *
         * @return {Function} a new function, which returns results from cache, if they are available, otherwise uses the given fn to compute the results.
         * This returned function has a 'clearCache' function attached, which clears the caching. If a parameter ( a bucket id) is  provided,
         * only clears the cache in the specified cache bucket.
         */
        cache = function(fn, config){
            config = config || {}

            var bucketCache = {},
                cache       = {},
                skipCacheParamNumber = config.skipCacheIndex,
                cacheBucketMethod    = config.cacheBucket,
                cacheKeyBuilder      = config.cacheKey,
                cacheArgsLength      = skipCacheParamNumber == null?
                                            fn.length:
                                            skipCacheParamNumber,
                cachingFn

            cachingFn = function(){
                var result,
                    skipCache = skipCacheParamNumber != null?
                                                arguments[skipCacheParamNumber] === true:
                                                false,
                    args = skipCache?
                                    SLICE.call(arguments, 0, cacheArgsLength):
                                    SLICE.call(arguments),

                    cacheBucketId = cacheBucketMethod != null?
                                        typeof cacheBucketMethod == 'function'?
                                            cacheBucketMethod():
                                            typeof this[cacheBucketMethod] == 'function'?
                                                this[cacheBucketMethod]():
                                                null
                                        :
                                        null,


                    cacheObject = cacheBucketId?
                                        bucketCache[cacheBucketId]:
                                        cache,

                    cacheKey = (cacheKeyBuilder || getCacheKey)(args, cacheArgsLength)

                if (cacheBucketId && !cacheObject){
                    cacheObject = bucketCache[cacheBucketId] = {}
                }

                if (skipCache || cacheObject[cacheKey] == null){
                    cacheObject[cacheKey] = result = fn.apply(this, args)
                } else {
                    result = cacheObject[cacheKey]
                }

                return result
            }

            /*
             * @param {String|Object|Number} [bucketId] the bucket for which to clear the cache. If none given, clears all the cache for this function.
             */
            cachingFn.clearCache = function(bucketId){
                if (bucketId){
                    delete bucketCache[String(bucketId)]
                } else {
                    cache = {}
                    bucketCache = {}
                }
            }

            /*
             *
             * @param {Array} cacheArgs The array of objects from which to create the cache key
             * @param {Number} [cacheParamNumber] A limit for the cache args that are actually used to compute the cache key.
             * @param {Function} [cacheKeyBuilder] The function to be used to compute the cache key from the given cacheArgs and cacheParamNumber
             */
            cachingFn.getCache = function(cacheArgs, cacheParamNumber, cacheKeyBuilder){
                return cachingFn.getBucketCache(null, cacheArgs, cacheParamNumber, cacheKeyBuilder)
            }

            /*
             *
             * @param {String} bucketId The id of the cache bucket from which to retrieve the cached value
             * @param {Array} cacheArgs The array of objects from which to create the cache key
             * @param {Number} [cacheParamNumber] A limit for the cache args that are actually used to compute the cache key.
             * @param {Function} [cacheKeyBuilder] The function to be used to compute the cache key from the given cacheArgs and cacheParamNumber
             */
            cachingFn.getBucketCache = function(bucketId, cacheArgs, cacheParamNumber, cacheKeyBuilder){
                var cacheObject = cache,
                    cacheKey = (cacheKeyBuilder || getCacheKey)(cacheArgs, cacheParamNumber)

                if (bucketId){
                    bucketId = String(bucketId);

                    cacheObject = bucketCache[bucketId] = bucketCache[bucketId] || {}
                }

                return cacheObject[cacheKey]
            }

            /*
             *
             * @param {Object} value The value to set in the cache
             * @param {Array} cacheArgs The array of objects from which to create the cache key
             * @param {Number} [cacheParamNumber] A limit for the cache args that are actually used to compute the cache key.
             * @param {Function} [cacheKeyBuilder] The function to be used to compute the cache key from the given cacheArgs and cacheParamNumber
             */
            cachingFn.setCache = function(value, cacheArgs, cacheParamNumber, cacheKeyBuilder){
                return cachingFn.setBucketCache(null, value, cacheArgs, cacheParamNumber, cacheKeyBuilder)
            }

            /*
             *
             * @param {String} bucketId The id of the cache bucket for which to set the cache value
             * @param {Object} value The value to set in the cache
             * @param {Array} cacheArgs The array of objects from which to create the cache key
             * @param {Number} [cacheParamNumber] A limit for the cache args that are actually used to compute the cache key.
             * @param {Function} [cacheKeyBuilder] The function to be used to compute the cache key from the given cacheArgs and cacheParamNumber
             */
            cachingFn.setBucketCache = function(bucketId, value, cacheArgs, cacheParamNumber, cacheKeyBuilder){

                var cacheObject = cache,
                    cacheKey = (cacheKeyBuilder || getCacheKey)(cacheArgs, cacheParamNumber)

                if (bucketId){
                    bucketId = String(bucketId)

                    cacheObject = bucketCache[bucketId] = bucketCache[bucketId] || {};
                }

                return cacheObject[cacheKey] = value
            }

            return cachingFn
        }

module.exports = {

    map: curry(function(fn, value){
        return value != undefined && typeof value.map?
                value.map(fn):
                fn(value)
    }),

    dot: curry(function(prop, value){
        return value != undefined? value[prop]: undefined
    }),

    maxArgs: curry(maxArgs),

    /**
     * @method compose
     *
     * Example:
     *
     *      zippy.Function.compose(c, b, a)
     *
     * See {@link Function#compose}
     */
    compose: compose,

    /**
     * See {@link Function#self}
     */
    self: function(fn){
        return fn
    },

    /**
     * See {@link Function#buffer}
     */
    buffer: buffer,

    /**
     * See {@link Function#delay}
     */
    delay: delay,

    /**
     * See {@link Function#defer}
     * @param {Function} fn
     * @param {Object} scope
     */
    defer:defer,

    /**
     * See {@link Function#skipArgs}
     * @param {Function} fn
     * @param {Number} [count=0] how many args to skip when calling the resulting function
     * @return {Function} The function that will call the original fn without the first count args.
     */
    skipArgs: skipArgs,

    /**
     * See {@link Function#intercept}
     */
    intercept: function(fn, interceptedFn, withStopArgs){
        return intercept(interceptedFn, fn, withStopArgs)
    },

    /**
     * See {@link Function#throttle}
     */
    throttle: throttle,

    /**
     * See {@link Function#spread}
     */
    spread: spread,

    /**
     * See {@link Function#chain}
     */
    chain: function(fn, where, mainFn){
        return chain(where, mainFn, fn)
    },

    /**
     * See {@link Function#before}
     */
    before: function(fn, otherFn){
        return chain('before', otherFn, fn)
    },

    /**
     * See {@link Function#after}
     */
    after: function(fn, otherFn){
        return chain('after', otherFn, fn)
    },

    /**
     * See {@link Function#curry}
     */
    curry: curry,

    /**
     * See {@link Function#forward}
     */
    forward: forward,

    /**
     * See {@link Function#once}
     */
    once: once,

    /**
     * See {@link Function#bindArgs}
     */
    bindArgs: function(fn){
        return bindArgsArray(fn, SLICE.call(arguments, 1))
    },

    /**
     * See {@link Function#bindArgsArray}
     */
    bindArgsArray: bindArgsArray,

    /**
     * See {@link Function#lockArgs}
     */
    lockArgs: function(fn){
        return lockArgsArray(fn, SLICE.call(arguments, 1))
    },

    /**
     * See {@link Function#lockArgsArray}
     */
    lockArgsArray: lockArgsArray,

    bindFunctionsOf: bindFunctionsOf,

    find: find
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/index.js":[function(require,module,exports){
module.exports = require('./src')
},{"./src":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/index.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/arguments.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Arguments]' || !!value.callee
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/array.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return Array.isArray(value)
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/boolean.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return typeof value == 'boolean'
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/date.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Date]'
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/float.js":[function(require,module,exports){
'use strict'

var number = require('./number')

module.exports = function(value){
    return number(value) && (value === parseFloat(value, 10)) && !(value === parseInt(value, 10))
}
},{"./number":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/number.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/function.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Function]'
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/index.js":[function(require,module,exports){
'use strict'

module.exports = {
    'numeric'  : require('./numeric'),
    'number'   : require('./number'),
    'int'      : require('./int'),
    'float'    : require('./float'),
    'string'   : require('./string'),
    'function' : require('./function'),
    'object'   : require('./object'),
    'arguments': require('./arguments'),
    'boolean'  : require('./boolean'),
    'date'     : require('./date'),
    'regexp'   : require('./regexp'),
    'array'    : require('./array')
}
},{"./arguments":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/arguments.js","./array":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/array.js","./boolean":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/boolean.js","./date":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/date.js","./float":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/float.js","./function":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/function.js","./int":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/int.js","./number":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/number.js","./numeric":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/numeric.js","./object":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/object.js","./regexp":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/regexp.js","./string":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/string.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/int.js":[function(require,module,exports){
'use strict'

var number = require('./number')

module.exports = function(value){
    return number(value) && (value === parseInt(value, 10))
}
},{"./number":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/number.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/number.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return typeof value === 'number' && isFinite(value)
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/numeric.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return !isNaN( parseFloat( value ) ) && isFinite( value )
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/object.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object Object]'
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/regexp.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(value){
    return objectToString.apply(value) === '[object RegExp]'
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/src/string.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return typeof value == 'string'
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/isemail/index.js":[function(require,module,exports){
module.exports = require('./lib/isemail');

},{"./lib/isemail":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/isemail/lib/isemail.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/isemail/lib/isemail.js":[function(require,module,exports){
(function (process){
/**
 * To validate an email address according to RFCs 5321, 5322 and others
 *
 * Copyright © 2008-2011, Dominic Sayers
 * Test schema documentation Copyright © 2011, Daniel Marschall
 * Port for Node.js Copyright © 2013, GlobeSherpa
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   - Neither the name of Dominic Sayers nor the names of its contributors may
 *     be used to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @author      Dominic Sayers <dominic@sayers.cc>
 * @author      Eli Skeggs <eskeggs@globesherpa.com>
 * @copyright   2008-2011 Dominic Sayers
 * @copyright   2013-2014 GlobeSherpa
 * @license     http://www.opensource.org/licenses/bsd-license.php BSD License
 * @link        http://www.dominicsayers.com/isemail
 * @link        https://github.com/globesherpa/isemail
 * @version     1.1.1 - Optimization pass, simplify constants, style, dead code.
 */

// lazy-loaded
var dns, HAS_REQUIRE = typeof require !== 'undefined';

// categories
var ISEMAIL_VALID_CATEGORY = 1;
var ISEMAIL_DNSWARN = 7;
var ISEMAIL_RFC5321 = 15;
var ISEMAIL_CFWS = 31;
var ISEMAIL_DEPREC = 63;
var ISEMAIL_RFC5322 = 127;
var ISEMAIL_ERR = 255;

// diagnoses
// address is valid
var ISEMAIL_VALID = 0;
// address is valid but a DNS check was not successful
var ISEMAIL_DNSWARN_NO_MX_RECORD = 5;
var ISEMAIL_DNSWARN_NO_RECORD = 6;
// address is valid for SMTP but has unusual elements
var ISEMAIL_RFC5321_TLD = 9;
var ISEMAIL_RFC5321_TLDNUMERIC = 10;
var ISEMAIL_RFC5321_QUOTEDSTRING = 11;
var ISEMAIL_RFC5321_ADDRESSLITERAL = 12;
var ISEMAIL_RFC5321_IPV6DEPRECATED = 13;
// address is valid within the message but cannot be used unmodified for the
// envelope
var ISEMAIL_CFWS_COMMENT = 17;
var ISEMAIL_CFWS_FWS = 18;
// address contains deprecated elements but may still be valid in restricted
// contexts
var ISEMAIL_DEPREC_LOCALPART = 33;
var ISEMAIL_DEPREC_FWS = 34;
var ISEMAIL_DEPREC_QTEXT = 35;
var ISEMAIL_DEPREC_QP = 36;
var ISEMAIL_DEPREC_COMMENT = 37;
var ISEMAIL_DEPREC_CTEXT = 38;
var ISEMAIL_DEPREC_CFWS_NEAR_AT = 49;
// the address is only valid according to the broad definition of RFC 5322, but
// otherwise invalid
var ISEMAIL_RFC5322_DOMAIN = 65;
var ISEMAIL_RFC5322_TOOLONG = 66;
var ISEMAIL_RFC5322_LOCAL_TOOLONG = 67;
var ISEMAIL_RFC5322_DOMAIN_TOOLONG = 68;
var ISEMAIL_RFC5322_LABEL_TOOLONG = 69;
var ISEMAIL_RFC5322_DOMAINLITERAL = 70;
var ISEMAIL_RFC5322_DOMLIT_OBSDTEXT = 71;
var ISEMAIL_RFC5322_IPV6_GRPCOUNT = 72;
var ISEMAIL_RFC5322_IPV6_2X2XCOLON = 73;
var ISEMAIL_RFC5322_IPV6_BADCHAR = 74;
var ISEMAIL_RFC5322_IPV6_MAXGRPS = 75;
var ISEMAIL_RFC5322_IPV6_COLONSTRT = 76;
var ISEMAIL_RFC5322_IPV6_COLONEND = 77;
// address is invalid for any purpose
var ISEMAIL_ERR_EXPECTING_DTEXT = 129;
var ISEMAIL_ERR_NOLOCALPART = 130;
var ISEMAIL_ERR_NODOMAIN = 131;
var ISEMAIL_ERR_CONSECUTIVEDOTS = 132;
var ISEMAIL_ERR_ATEXT_AFTER_CFWS = 133;
var ISEMAIL_ERR_ATEXT_AFTER_QS = 134;
var ISEMAIL_ERR_ATEXT_AFTER_DOMLIT = 135;
var ISEMAIL_ERR_EXPECTING_QPAIR = 136;
var ISEMAIL_ERR_EXPECTING_ATEXT = 137;
var ISEMAIL_ERR_EXPECTING_QTEXT = 138;
var ISEMAIL_ERR_EXPECTING_CTEXT = 139;
var ISEMAIL_ERR_BACKSLASHEND = 140;
var ISEMAIL_ERR_DOT_START = 141;
var ISEMAIL_ERR_DOT_END = 142;
var ISEMAIL_ERR_DOMAINHYPHENSTART = 143;
var ISEMAIL_ERR_DOMAINHYPHENEND = 144;
var ISEMAIL_ERR_UNCLOSEDQUOTEDSTR = 145;
var ISEMAIL_ERR_UNCLOSEDCOMMENT = 146;
var ISEMAIL_ERR_UNCLOSEDDOMLIT = 147;
var ISEMAIL_ERR_FWS_CRLF_X2 = 148;
var ISEMAIL_ERR_FWS_CRLF_END = 149;
var ISEMAIL_ERR_CR_NO_LF = 150;
var ISEMAIL_ERR_UNKNOWN_TLD = 160;
var ISEMAIL_ERR_TOOSHORT_DOMAIN = 161;

// function control
var THRESHOLD = 16;
// email parts
var COMPONENT_LOCALPART = 0;
var COMPONENT_DOMAIN = 1;
var COMPONENT_LITERAL = 2;
var CONTEXT_COMMENT = 3;
var CONTEXT_FWS = 4;
var CONTEXT_QUOTEDSTRING = 5;
var CONTEXT_QUOTEDPAIR = 6;

// US-ASCII visible characters not valid for atext
// (http://tools.ietf.org/html/rfc5322#section-3.2.3)
var SPECIALS = '()<>[]:;@\\,."';

function optimizeLookup(string) {
  var body = '', min = 0x100, max = 0, lookup = new Array(min);
  for (var i = min - 1; i >= 0; i--) {
    lookup[i] = false;
  }
  for (var i = 0; i < string.length; i++) {
    var chr = string.charCodeAt(i);
    if (chr < min) {
      min = chr;
    }
    if (chr > max) {
      max = chr;
    }
    lookup[chr] = true;
  }
  lookup.length = max;
  var body = 'var lookup = ' + JSON.stringify(lookup) + ';\n';
  body += 'return function(code) {\n';
  body += '  if (code < ' + min + ' || code > ' + max + ') {\n';
  body += '    return false;\n';
  body += '  }\n';
  body += '  return lookup[code];\n';
  body += '}';
  return (new Function(body))();
}

var specialsLookup = optimizeLookup(SPECIALS);

// matches valid IPv4 addresses from the end of a string
var IPv4_REGEX =
  /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/;
var IPv6_REGEX = /^[a-fA-F\d]{0,4}$/;
var IPv6_REGEX_TEST = IPv6_REGEX.test.bind(IPv6_REGEX);

var hasOwn = Object.prototype.hasOwnProperty;

/**
 * Get the largest number in the array.
 *
 * Returns -Infinity if the array is empty.
 *
 * @param {Array.<number>} array The array to scan.
 * @return {number} The largest number contained.
 */
function maxValue(array) {
  var v = -Infinity, i = 0, n = array.length;

  for (; i < n; i++) {
    if (array[i] > v) {
      v = array[i];
    }
  }

  return v;
}

/**
 * Check that an email address conforms to RFCs 5321, 5322 and others
 *
 * As of Version 3.0, we are now distinguishing clearly between a Mailbox
 * as defined by RFC 5321 and an addr-spec as defined by RFC 5322. Depending
 * on the context, either can be regarded as a valid email address. The
 * RFC 5321 Mailbox specification is more restrictive (comments, white space
 * and obsolete forms are not allowed).
 *
 * @param {string} email The email address to check.
 * @param {boolean} checkDNS If true then will check DNS for MX records. If true
 *   this isEmail _will_ be asynchronous.
 * @param {*} errorLevel Determines the boundary between valid and invalid
 *   addresses. Status codes above this number will be returned as-is, status
 *   codes below will be returned as ISEMAIL_VALID. Thus the calling program can
 *   simply look for ISEMAIL_VALID if it is only interested in whether an
 *   address is valid or not. The errorLevel will determine how "picky"
 *   isEmail() is about the address. If omitted or passed as false then
 *   isEmail() will return true or false rather than an integer error or
 *   warning. NB Note the difference between errorLevel = false and
 *   errorLevel = 0.
 * @return {*}
 */
function isEmail(email, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  options || (options = {});

  var threshold, diagnose;
  if (typeof options.errorLevel === 'number') {
    diagnose = true;
    threshold = options.errorLevel;
  } else {
    diagnose = !!options.errorLevel;
    threshold = ISEMAIL_VALID;
  }

  if (options.tldWhitelist && typeof options.tldWhitelist !== 'object') {
    throw new TypeError('expected array or object tldWhitelist');
  }

  if (options.minDomainAtoms && (options.minDomainAtoms !==
      ((+options.minDomainAtoms) | 0) || options.minDomainAtoms < 0)) {
    throw new TypeError('expected positive integer minDomainAtoms');
  }

  var maxResult = ISEMAIL_VALID;

  function updateResult(value) {
    if (value > maxResult) {
      maxResult = value;
    }
  }

  var context = {
    now: COMPONENT_LOCALPART,
    prev: COMPONENT_LOCALPART,
    stack: [COMPONENT_LOCALPART]
  };

  var token = '', prevToken = '', charCode = 0;
  var parseData = {local: '', domain: ''};
  var atomList = {local: [''], domain: ['']};

  var elementCount = 0, elementLength = 0, crlfCount = 0;
  var hyphenFlag = false, assertEnd = false;

  for (var i = 0; i < email.length; i++) {
    token = email[i];

    switch (context.now) {
    // local-part
    case COMPONENT_LOCALPART:
      // http://tools.ietf.org/html/rfc5322#section-3.4.1
      //   local-part      =   dot-atom / quoted-string / obs-local-part
      //
      //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
      //
      //   dot-atom-text   =   1*atext *("." 1*atext)
      //
      //   quoted-string   =   [CFWS]
      //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
      //                       [CFWS]
      //
      //   obs-local-part  =   word *("." word)
      //
      //   word            =   atom / quoted-string
      //
      //   atom            =   [CFWS] 1*atext [CFWS]
      switch (token) {
      // comment
      case '(':
        if (elementLength === 0) {
          // comments are OK at the beginning of an element
          updateResult(elementCount === 0 ? ISEMAIL_CFWS_COMMENT :
            ISEMAIL_DEPREC_COMMENT);
        } else {
          updateResult(ISEMAIL_CFWS_COMMENT);
           // can't start a comment in an element, should be end
          assertEnd = true;
        }
        context.stack.push(context.now);
        context.now = CONTEXT_COMMENT;
        break;
      // next dot-atom element
      case '.':
        if (elementLength === 0) {
          // another dot, already?
          updateResult(elementCount === 0 ? ISEMAIL_ERR_DOT_START :
            ISEMAIL_ERR_CONSECUTIVEDOTS);
        } else {
          // the entire local-part can be a quoted string for RFC 5321
          // if it's just one atom that is quoted then it's an RFC 5322 obsolete
          // form
          if (assertEnd) {
            updateResult(ISEMAIL_DEPREC_LOCALPART);
          }

          // CFWS & quoted strings are OK again now we're at the beginning of an
          // element (although they are obsolete forms)
          assertEnd = false;
          elementLength = 0;
          elementCount++;
          parseData.local += token;
          atomList.local[elementCount] = ''; // TODO: push?
        }
        break;
      // quoted string
      case '"':
        if (elementLength === 0) {
          // the entire local-part can be a quoted string for RFC 5321
          // if it's just one atom that is quoted then it's an RFC 5322 obsolete
          // form
          updateResult(elementCount === 0 ? ISEMAIL_RFC5321_QUOTEDSTRING :
            ISEMAIL_DEPREC_LOCALPART);

          parseData.local += token;
          atomList.local[elementCount] += token;
          elementLength++;
          assertEnd = true; // quoted string must be the entire element
          context.stack.push(context.now);
          context.now = CONTEXT_QUOTEDSTRING;
        } else {
          updateResult(ISEMAIL_ERR_EXPECTING_ATEXT);
        }
        break;
      // folding white space
      case '\r':
        if ((++i === email.length) || email[i] !== '\n') {
          // fatal error
          updateResult(ISEMAIL_ERR_CR_NO_LF);
          break;
        }
      case ' ':
      case '\t':
        if (elementLength === 0) {
          updateResult(elementCount === 0 ? ISEMAIL_CFWS_FWS :
            ISEMAIL_DEPREC_FWS);
        } else {
          // we can't start FWS in the middle of an element, better be end
          assertEnd = true;
        }

        context.stack.push(context.now);
        context.now = CONTEXT_FWS;
        prevToken = token;
        break;
      // @
      case '@':
        // at this point we should have a valid local-part
        /* istanbul ignore next: logically unreachable */
        if (context.stack.length !== 1) {
          throw new Error('unexpected item on context stack');
        }

        if (parseData.local.length === 0) {
          // fatal error
          updateResult(ISEMAIL_ERR_NOLOCALPART);
        } else if (elementLength === 0) {
          // fatal error
          updateResult(ISEMAIL_ERR_DOT_END);
        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1
        //   the maximum total length of a user name or other local-part is 64
        //   octets
        } else if (parseData.local.length > 64) {
          updateResult(ISEMAIL_RFC5322_LOCAL_TOOLONG);
        // http://tools.ietf.org/html/rfc5322#section-3.4.1
        //   comments and folding white space
        //   SHOULD NOT be used around the "@" in the addr-spec
        //
        // http://tools.ietf.org/html/rfc2119
        // 4. SHOULD NOT  this phrase, or the phrase "NOT RECOMMENDED" mean that
        //    there may exist valid reasons in particular circumstances when the
        //    particular behavior is acceptable or even useful, but the full
        //    implications should be understood and the case carefully weighed
        //    before implementing any behavior described with this label
        } else if ((context.prev === CONTEXT_COMMENT) ||
            (context.prev === CONTEXT_FWS)) {
          updateResult(ISEMAIL_DEPREC_CFWS_NEAR_AT);
        }

        // clear everything down for the domain parsing
        context.now = COMPONENT_DOMAIN; // where we are
        context.stack[0] = COMPONENT_DOMAIN; // where we have been
        elementCount = 0;
        elementLength = 0;
        assertEnd = false; // CFWS can only appear at the end of the element
        break;
      // atext
      default:
        // http://tools.ietf.org/html/rfc5322#section-3.2.3
        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
        //            "!" / "#" /     ;  characters not including
        //            "$" / "%" /     ;  specials.  Used for atoms.
        //            "&" / "'" /
        //            "*" / "+" /
        //            "-" / "/" /
        //            "=" / "?" /
        //            "^" / "_" /
        //            "`" / "{" /
        //            "|" / "}" /
        //            "~"
        if (assertEnd) {
          // we have encountered atext where it is no longer valid
          switch (context.prev) {
          case CONTEXT_COMMENT:
          case CONTEXT_FWS:
            updateResult(ISEMAIL_ERR_ATEXT_AFTER_CFWS);
            break;
          case CONTEXT_QUOTEDSTRING:
            updateResult(ISEMAIL_ERR_ATEXT_AFTER_QS);
            break;
          /* istanbul ignore next: logically unreachable */
          default:
            throw new Error('more atext found where none is allowed, ' +
              'but unrecognized prev context: ' + context.prev);
          }
        } else {
          context.prev = context.now;
          charCode = token.charCodeAt(0);

          if (charCode < 33 || charCode > 126 || charCode === 10 ||
              specialsLookup(charCode)) {
            // fatal error
            updateResult(ISEMAIL_ERR_EXPECTING_ATEXT);
          }

          parseData.local += token;
          atomList.local[elementCount] += token;
          elementLength++;
        }
      }
      break;
    case COMPONENT_DOMAIN:
      // http://tools.ietf.org/html/rfc5322#section-3.4.1
      //   domain          =   dot-atom / domain-literal / obs-domain
      //
      //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
      //
      //   dot-atom-text   =   1*atext *("." 1*atext)
      //
      //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
      //
      //   dtext           =   %d33-90 /          ; Printable US-ASCII
      //                       %d94-126 /         ;  characters not including
      //                       obs-dtext          ;  "[", "]", or "\"
      //
      //   obs-domain      =   atom *("." atom)
      //
      //   atom            =   [CFWS] 1*atext [CFWS]

      // http://tools.ietf.org/html/rfc5321#section-4.1.2
      //   Mailbox        = Local-part "@" ( Domain / address-literal )
      //
      //   Domain         = sub-domain *("." sub-domain)
      //
      //   address-literal  = "[" ( IPv4-address-literal /
      //                    IPv6-address-literal /
      //                    General-address-literal ) "]"
      //                    ; See Section 4.1.3

      // http://tools.ietf.org/html/rfc5322#section-3.4.1
      //      Note: A liberal syntax for the domain portion of addr-spec is
      //      given here.  However, the domain portion contains addressing
      //      information specified by and used in other protocols (e.g.,
      //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
      //      incumbent upon implementations to conform to the syntax of
      //      addresses for the context in which they are used.
      // is_email() author's note: it's not clear how to interpret this in
      // the context of a general email address validator. The conclusion I
      // have reached is this: "addressing information" must comply with
      // RFC 5321 (and in turn RFC 1035), anything that is "semantically
      // invisible" must comply only with RFC 5322.
      switch (token) {
      // comment
      case '(':
        if (elementLength === 0) {
          // comments at the start of the domain are deprecated in the text
          // comments at the start of a subdomain are obs-domain
          // (http://tools.ietf.org/html/rfc5322#section-3.4.1)
          updateResult(elementCount === 0 ? ISEMAIL_DEPREC_CFWS_NEAR_AT :
            ISEMAIL_DEPREC_COMMENT);
        } else {
          updateResult(ISEMAIL_CFWS_COMMENT);
          assertEnd = true; // can't start a comment mid-element, better be end
        }

        context.stack.push(context.now);
        context.now = CONTEXT_COMMENT;
        break;
      // next dot-atom element
      case '.':
        if (elementLength === 0) {
          // another dot, already? fatal error
          updateResult(elementCount === 0 ? ISEMAIL_ERR_DOT_START :
            ISEMAIL_ERR_CONSECUTIVEDOTS);
        } else if (hyphenFlag) {
          // previous subdomain ended in a hyphen
          updateResult(ISEMAIL_ERR_DOMAINHYPHENEND); // fatal error
        } else if (elementLength > 63) {
          // Nowhere in RFC 5321 does it say explicitly that the
          // domain part of a Mailbox must be a valid domain according
          // to the DNS standards set out in RFC 1035, but this *is*
          // implied in several places. For instance, wherever the idea
          // of host routing is discussed the RFC says that the domain
          // must be looked up in the DNS. This would be nonsense unless
          // the domain was designed to be a valid DNS domain. Hence we
          // must conclude that the RFC 1035 restriction on label length
          // also applies to RFC 5321 domains.
          //
          // http://tools.ietf.org/html/rfc1035#section-2.3.4
          // labels          63 octets or less

          updateResult(ISEMAIL_RFC5322_LABEL_TOOLONG);
        }

        // CFWS is OK again now we're at the beginning of an element (although
        // it may be obsolete CFWS)
        assertEnd = false;
        elementLength = 0;
        elementCount++;
        atomList.domain[elementCount] = '';
        parseData.domain += token;

        break;
      // domain literal
      case '[':
        if (parseData.domain.length === 0) {
          // domain literal must be the only component
          assertEnd = true;
          elementLength++;
          context.stack.push(context.now);
          context.now = COMPONENT_LITERAL;
          parseData.domain += token;
          atomList.domain[elementCount] += token;
          parseData.literal = '';
        } else {
          // fatal error
          updateResult(ISEMAIL_ERR_EXPECTING_ATEXT);
        }
        break;
      // folding white space
      case '\r':
        if ((++i === email.length) || email[i] !== '\n') {
          // fatal error
          updateResult(ISEMAIL_ERR_CR_NO_LF);
          break;
        }
      case ' ':
      case '\t':
        if (elementLength === 0) {
          updateResult(elementCount === 0 ? ISEMAIL_DEPREC_CFWS_NEAR_AT :
            ISEMAIL_DEPREC_FWS);
        } else {
          // we can't start FWS in the middle of an element, so this better be
          // the end
          updateResult(ISEMAIL_CFWS_FWS);
          assertEnd = true;
        }

        context.stack.push(context.now);
        context.now = CONTEXT_FWS;
        prevToken = token;
        break;
      // atext
      default:
        // RFC 5322 allows any atext...
        // http://tools.ietf.org/html/rfc5322#section-3.2.3
        //    atext = ALPHA / DIGIT / ; Printable US-ASCII
        //            "!" / "#" /     ;  characters not including
        //            "$" / "%" /     ;  specials.  Used for atoms.
        //            "&" / "'" /
        //            "*" / "+" /
        //            "-" / "/" /
        //            "=" / "?" /
        //            "^" / "_" /
        //            "`" / "{" /
        //            "|" / "}" /
        //            "~"

        // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
        //   (RFCs 1034 & 1123)
        // http://tools.ietf.org/html/rfc5321#section-4.1.2
        //   sub-domain     = Let-dig [Ldh-str]
        //
        //   Let-dig        = ALPHA / DIGIT
        //
        //   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
        //
        if (assertEnd) {
          // we have encountered atext where it is no longer valid
          switch (context.prev) {
          case CONTEXT_COMMENT:
          case CONTEXT_FWS:
            updateResult(ISEMAIL_ERR_ATEXT_AFTER_CFWS);
            break;
          case COMPONENT_LITERAL:
            updateResult(ISEMAIL_ERR_ATEXT_AFTER_DOMLIT);
            break;
          /* istanbul ignore next: logically unreachable */
          default:
            throw new Error('more atext found where none is allowed, ' +
              'but unrecognized prev context: ' + context.prev);
          }
        }

        charCode = token.charCodeAt(0);
        // assume this token isn't a hyphen unless we discover it is
        hyphenFlag = false;

        if (charCode < 33 || charCode > 126 || specialsLookup(charCode)) {
          // fatal error
          updateResult(ISEMAIL_ERR_EXPECTING_ATEXT);
        } else if (token === '-') {
          if (elementLength === 0) {
            // hyphens can't be at the beginning of a subdomain
            updateResult(ISEMAIL_ERR_DOMAINHYPHENSTART); // fatal error
          }

          hyphenFlag = true;
        } else if (!((charCode > 47 && charCode < 58) ||
                     (charCode > 64 && charCode < 91) ||
                     (charCode > 96 && charCode < 123))) {
          // not an RFC 5321 subdomain, but still OK by RFC 5322
          updateResult(ISEMAIL_RFC5322_DOMAIN);
        }

        parseData.domain += token;
        atomList.domain[elementCount] += token;
        elementLength++;
      }
      break;
    // domain literal
    case COMPONENT_LITERAL:
      // http://tools.ietf.org/html/rfc5322#section-3.4.1
      //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
      //
      //   dtext           =   %d33-90 /          ; Printable US-ASCII
      //                       %d94-126 /         ;  characters not including
      //                       obs-dtext          ;  "[", "]", or "\"
      //
      //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
      switch (token) {
      // end of domain literal
      case ']':
        if (maxResult < ISEMAIL_DEPREC) {
          // Could be a valid RFC 5321 address literal, so let's check

          // http://tools.ietf.org/html/rfc5321#section-4.1.2
          //   address-literal  = "[" ( IPv4-address-literal /
          //                    IPv6-address-literal /
          //                    General-address-literal ) "]"
          //                    ; See Section 4.1.3
          //
          // http://tools.ietf.org/html/rfc5321#section-4.1.3
          //   IPv4-address-literal  = Snum 3("."  Snum)
          //
          //   IPv6-address-literal  = "IPv6:" IPv6-addr
          //
          //   General-address-literal  = Standardized-tag ":" 1*dcontent
          //
          //   Standardized-tag  = Ldh-str
          //                     ; Standardized-tag MUST be specified in a
          //                     ; Standards-Track RFC and registered with IANA
          //
          //   dcontent      = %d33-90 / ; Printable US-ASCII
          //                 %d94-126 ; excl. "[", "\", "]"
          //
          //   Snum          = 1*3DIGIT
          //                 ; representing a decimal integer
          //                 ; value in the range 0 through 255
          //
          //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
          //
          //   IPv6-hex      = 1*4HEXDIG
          //
          //   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
          //
          //   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
          //                 [IPv6-hex *5(":" IPv6-hex)]
          //                 ; The "::" represents at least 2 16-bit groups of
          //                 ; zeros.  No more than 6 groups in addition to the
          //                 ; "::" may be present.
          //
          //   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
          //
          //   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
          //                 [IPv6-hex *3(":" IPv6-hex) ":"]
          //                 IPv4-address-literal
          //                 ; The "::" represents at least 2 16-bit groups of
          //                 ; zeros.  No more than 4 groups in addition to the
          //                 ; "::" and IPv4-address-literal may be present.
          //
          // is_email() author's note: We can't use ip2long() to validate
          // IPv4 addresses because it accepts abbreviated addresses
          // (xxx.xxx.xxx), expanding the last group to complete the address.
          // filter_var() validates IPv6 address inconsistently (up to PHP 5.3.3
          // at least) -- see http://bugs.php.net/bug.php?id=53236 for example

          // TODO: var here?
          var maxGroups = 8, matchesIP, index = false;
          var addressLiteral = parseData.literal;

          // maybe extract IPv4 part from the end of the address-literal
          if (matchesIP = IPv4_REGEX.exec(addressLiteral)) {
            if ((index = matchesIP.index) !== 0) {
              // convert IPv4 part to IPv6 format for futher testing
              addressLiteral = addressLiteral.slice(0, matchesIP.index) + '0:0';
            }
          }

          if (index === 0) {
            // nothing there except a valid IPv4 address, so...
            updateResult(ISEMAIL_RFC5321_ADDRESSLITERAL);
          } else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {
            updateResult(ISEMAIL_RFC5322_DOMAINLITERAL);
          } else {
            var match = addressLiteral.substr(5);
            matchesIP = match.split(':');
            index = match.indexOf('::');

            if (!~index) {
              // need exactly the right number of groups
              if (matchesIP.length !== maxGroups) {
                updateResult(ISEMAIL_RFC5322_IPV6_GRPCOUNT);
              }
            } else if (index !== match.lastIndexOf('::')) {
              updateResult(ISEMAIL_RFC5322_IPV6_2X2XCOLON);
            } else {
              if (index === 0 || index === match.length - 2) {
                // RFC 4291 allows :: at the start or end of an address with
                // 7 other groups in addition
                maxGroups++;
              }

              if (matchesIP.length > maxGroups) {
                updateResult(ISEMAIL_RFC5322_IPV6_MAXGRPS);
              } else if (matchesIP.length === maxGroups) {
                // eliding a single "::"
                updateResult(ISEMAIL_RFC5321_IPV6DEPRECATED);
              }
            }

            // IPv6 testing strategy
            if (match[0] === ':' && match[1] !== ':') {
              updateResult(ISEMAIL_RFC5322_IPV6_COLONSTRT);
            } else if (match[match.length - 1] === ':' &&
                       match[match.length - 2] !== ':') {
              updateResult(ISEMAIL_RFC5322_IPV6_COLONEND);
            } else if (matchesIP.every(IPv6_REGEX_TEST)) {
              updateResult(ISEMAIL_RFC5321_ADDRESSLITERAL);
            } else {
              updateResult(ISEMAIL_RFC5322_IPV6_BADCHAR);
            }
          }
        } else {
          updateResult(ISEMAIL_RFC5322_DOMAINLITERAL);
        }

        parseData.domain += token;
        atomList.domain[elementCount] += token;
        elementLength++;
        context.prev = context.now;
        context.now = context.stack.pop();
        break;
      case '\\':
        updateResult(ISEMAIL_RFC5322_DOMLIT_OBSDTEXT);
        context.stack.push(context.now);
        context.now = CONTEXT_QUOTEDPAIR;
        break;
      // folding white space
      case '\r':
        if ((++i === email.length) || email[i] !== '\n') {
          // fatal error
          updateResult(ISEMAIL_ERR_CR_NO_LF);
          break;
        }
      case ' ':
      case '\t':
        updateResult(ISEMAIL_CFWS_FWS);

        context.stack.push(context.now);
        context.now = CONTEXT_FWS;
        prevToken = token;
        break;
      // dtext
      default:
        // http://tools.ietf.org/html/rfc5322#section-3.4.1
        //   dtext         =   %d33-90 /  ; Printable US-ASCII
        //                     %d94-126 / ;  characters not including
        //                     obs-dtext  ;  "[", "]", or "\"
        //
        //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
        //
        //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
        //                     %d11 /     ;  characters that do not
        //                     %d12 /     ;  include the carriage
        //                     %d14-31 /  ;  return, line feed, and
        //                     %d127      ;  white space characters
        charCode = token.charCodeAt(0);

        // CR, LF, SP & HTAB have already been parsed above
        if (charCode > 127 || charCode === 0 || token === '[') {
          // fatal error
          updateResult(ISEMAIL_ERR_EXPECTING_DTEXT);
          break;
        } else if (charCode < 33 || charCode === 127) {
          updateResult(ISEMAIL_RFC5322_DOMLIT_OBSDTEXT);
        }

        parseData.literal += token;
        parseData.domain += token;
        atomList.domain[elementCount] += token;
        elementLength++;
      }
      break;
    // quoted string
    case CONTEXT_QUOTEDSTRING:
      // http://tools.ietf.org/html/rfc5322#section-3.2.4
      //   quoted-string = [CFWS]
      //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
      //                   [CFWS]
      //
      //   qcontent      = qtext / quoted-pair
      switch (token) {
      // quoted pair
      case '\\':
        context.stack.push(context.now);
        context.now = CONTEXT_QUOTEDPAIR;
        break;
      // folding white space
      // inside a quoted string, spaces are allowed as regular characters
      // it's only FWS if we include HTAB or CRLF
      case '\r':
        if ((++i === email.length) || email[i] !== '\n') {
          // fatal error
          updateResult(ISEMAIL_ERR_CR_NO_LF);
          break;
        }
      case '\t':
        // http://tools.ietf.org/html/rfc5322#section-3.2.2
        //   Runs of FWS, comment, or CFWS that occur between lexical tokens in
        //   a structured header field are semantically interpreted as a single
        //   space character.

        // http://tools.ietf.org/html/rfc5322#section-3.2.4
        //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
        //   semantically "invisible" and therefore not part of the
        //   quoted-string

        parseData.local += ' ';
        atomList.local[elementCount] += ' ';
        elementLength++;

        updateResult(ISEMAIL_CFWS_FWS);
        context.stack.push(context.now);
        context.now = CONTEXT_FWS;
        prevToken = token;
        break;
      // end of quoted string
      case '"':
        parseData.local += token;
        atomList.local[elementCount] += token;
        elementLength++;
        context.prev = context.now;
        context.now = context.stack.pop();
        break;
      // qtext
      default:
        // http://tools.ietf.org/html/rfc5322#section-3.2.4
        //   qtext          =   %d33 /             ; Printable US-ASCII
        //                      %d35-91 /          ;  characters not including
        //                      %d93-126 /         ;  "\" or the quote character
        //                      obs-qtext
        //
        //   obs-qtext      =   obs-NO-WS-CTL
        //
        //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
        //                      %d11 /             ;  characters that do not
        //                      %d12 /             ;  include the carriage
        //                      %d14-31 /          ;  return, line feed, and
        //                      %d127              ;  white space characters
        charCode = token.charCodeAt(0);

        if (charCode > 127 || charCode === 0 || charCode === 10) {
          updateResult(ISEMAIL_ERR_EXPECTING_QTEXT);
        } else if (charCode < 32 || charCode === 127) {
          updateResult(ISEMAIL_DEPREC_QTEXT);
        }

        parseData.local += token;
        atomList.local[elementCount] += token;
        elementLength++;
      }

      // http://tools.ietf.org/html/rfc5322#section-3.4.1
      //   If the string can be represented as a dot-atom (that is, it contains
      //   no characters other than atext characters or "." surrounded by atext
      //   characters), then the dot-atom form SHOULD be used and the quoted-
      //   string form SHOULD NOT be used.

      break;
    // quoted pair
    case CONTEXT_QUOTEDPAIR:
      // http://tools.ietf.org/html/rfc5322#section-3.2.1
      //   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
      //
      //   VCHAR           =  %d33-126   ; visible (printing) characters
      //   WSP             =  SP / HTAB  ; white space
      //
      //   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
      //
      //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
      //                       %d11 /    ;  characters that do not
      //                       %d12 /    ;  include the carriage
      //                       %d14-31 / ;  return, line feed, and
      //                       %d127     ;  white space characters
      //
      // i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
      charCode = token.charCodeAt(0);

      if (charCode > 127) {
        // fatal error
        updateResult(ISEMAIL_ERR_EXPECTING_QPAIR);
      } else if ((charCode < 31 && charCode !== 9) || charCode === 127) {
        // SP & HTAB are allowed
        updateResult(ISEMAIL_DEPREC_QP);
      }

      // At this point we know where this qpair occurred so
      // we could check to see if the character actually
      // needed to be quoted at all.
      // http://tools.ietf.org/html/rfc5321#section-4.1.2
      //   the sending system SHOULD transmit the
      //   form that uses the minimum quoting possible.

      // TODO: check whether the character needs to be quoted (escaped)
      // in this context

      context.prev = context.now;
      context.now = context.stack.pop(); // end of qpair
      token = '\\' + token;

      switch (context.now) {
      case CONTEXT_COMMENT: break;
      case CONTEXT_QUOTEDSTRING:
        parseData.local += token;
        atomList.local[elementCount] += token;

        // the maximum sizes specified by RFC 5321 are octet counts,
        // so we must include the backslash
        elementLength += 2;
        break;
      case COMPONENT_LITERAL:
        parseData.domain += token;
        atomList.domain[elementCount] += token;

        // the maximum sizes specified by RFC 5321 are octet counts,
        // so we must include the backslash
        elementLength += 2;
        break;
      /* istanbul ignore next: logically unreachable */
      default:
        throw new Error('quoted pair logic invoked in an invalid context: ' +
          context.now);
      }
      break;
    // comment
    case CONTEXT_COMMENT:
      // http://tools.ietf.org/html/rfc5322#section-3.2.2
      //   comment  = "(" *([FWS] ccontent) [FWS] ")"
      //
      //   ccontent = ctext / quoted-pair / comment
      switch (token) {
      // nested comment
      case '(':
        // nested comments are ok
        context.stack.push(context.now);
        context.now = CONTEXT_COMMENT;
        break;
      // end of comment
      case ')':
        context.prev = context.now;
        context.now = context.stack.pop();

        break;
      // quoted pair
      case '\\':
        context.stack.push(context.now);
        context.now = CONTEXT_QUOTEDPAIR;
        break;
      // folding white space
      case '\r':
        if ((++i === email.length) || email[i] !== '\n') {
          // fatal error
          updateResult(ISEMAIL_ERR_CR_NO_LF);
          break;
        }
      case ' ':
      case '\t':
        updateResult(ISEMAIL_CFWS_FWS);

        context.stack.push(context.now);
        context.now = CONTEXT_FWS;
        prevToken = token;
        break;
      // ctext
      default:
        // http://tools.ietf.org/html/rfc5322#section-3.2.3
        //   ctext         = %d33-39 /  ; Printable US-ASCII
        //                   %d42-91 /  ;  characters not including
        //                   %d93-126 / ;  "(", ")", or "\"
        //                   obs-ctext
        //
        //   obs-ctext     = obs-NO-WS-CTL
        //
        //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
        //                   %d11 /     ;  characters that do not
        //                   %d12 /     ;  include the carriage
        //                   %d14-31 /  ;  return, line feed, and
        //                   %d127      ;  white space characters
        charCode = token.charCodeAt(0);

        if (charCode > 127 || charCode === 0 || charCode === 10) {
          // fatal error
          updateResult(ISEMAIL_ERR_EXPECTING_CTEXT);
          break;
        } else if (charCode < 32 || charCode === 127) {
          updateResult(ISEMAIL_DEPREC_CTEXT);
        }
      }
      break;
    // folding white space
    case CONTEXT_FWS:
      // http://tools.ietf.org/html/rfc5322#section-3.2.2
      //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
      //                                   ; Folding white space

      // But note the erratum:
      // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
      //   In the obsolete syntax, any amount of folding white space MAY be
      //   inserted where the obs-FWS rule is allowed.  This creates the
      //   possibility of having two consecutive "folds" in a line, and
      //   therefore the possibility that a line which makes up a folded header
      //   field could be composed entirely of white space.
      //
      //   obs-FWS =   1*([CRLF] WSP)

      if (prevToken === '\r') {
        if (token === '\r') {
          // fatal error
          updateResult(ISEMAIL_ERR_FWS_CRLF_X2);
          break;
        }

        if (++crlfCount > 1) {
          // multiple folds = obsolete FWS
          updateResult(ISEMAIL_DEPREC_FWS);
        } else {
          crlfCount = 1;
        }
      }

      switch (token) {
      case '\r':
        if ((++i === email.length) || email[i] !== '\n') {
          // fatal error
          updateResult(ISEMAIL_ERR_CR_NO_LF);
        }
        break;
      case ' ':
      case '\t':
        break;
      default:
        if (prevToken === '\r') {
          // fatal error
          updateResult(ISEMAIL_ERR_FWS_CRLF_END);
        }

        crlfCount = 0;

        context.prev = context.now;
        context.now = context.stack.pop(); // end of FWS

        i--; // look at this token again in the parent context
      }
      prevToken = token;
      break;
    // unexpected context
    /* istanbul ignore next: logically unreachable */
    default:
      throw new Error('unknown context: ' + context.now);
    } // primary state machine

    if (maxResult > ISEMAIL_RFC5322) {
      // fatal error, no point continuing
      break;
    }
  } // token loop

  // check for errors
  if (maxResult < ISEMAIL_RFC5322) {
    // fatal errors
    if (context.now === CONTEXT_QUOTEDSTRING) {
      updateResult(ISEMAIL_ERR_UNCLOSEDQUOTEDSTR);
    } else if (context.now === CONTEXT_QUOTEDPAIR) {
      updateResult(ISEMAIL_ERR_BACKSLASHEND);
    } else if (context.now === CONTEXT_COMMENT) {
      updateResult(ISEMAIL_ERR_UNCLOSEDCOMMENT);
    } else if (context.now === COMPONENT_LITERAL) {
      updateResult(ISEMAIL_ERR_UNCLOSEDDOMLIT);
    } else if (token === '\r') {
      updateResult(ISEMAIL_ERR_FWS_CRLF_END);
    } else if (parseData.domain.length === 0) {
      updateResult(ISEMAIL_ERR_NODOMAIN);
    } else if (elementLength === 0) {
      updateResult(ISEMAIL_ERR_DOT_END);
    } else if (hyphenFlag) {
      updateResult(ISEMAIL_ERR_DOMAINHYPHENEND);

    // other errors
    } else if (parseData.domain.length > 255) {
      // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
      //   The maximum total length of a domain name or number is 255 octets.
      updateResult(ISEMAIL_RFC5322_DOMAIN_TOOLONG);
    } else if (parseData.local.length + parseData.domain.length + /* '@' */ 1 >
        254) {
      // http://tools.ietf.org/html/rfc5321#section-4.1.2
      //   Forward-path   = Path
      //
      //   Path           = "<" [ A-d-l ":" ] Mailbox ">"
      //
      // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
      //   The maximum total length of a reverse-path or forward-path is 256
      //   octets (including the punctuation and element separators).
      //
      // Thus, even without (obsolete) routing information, the Mailbox can
      // only be 254 characters long. This is confirmed by this verified
      // erratum to RFC 3696:
      //
      // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
      //   However, there is a restriction in RFC 2821 on the length of an
      //   address in MAIL and RCPT commands of 254 characters.  Since addresses
      //   that do not fit in those fields are not normally useful, the upper
      //   limit on address lengths should normally be considered to be 254.
      updateResult(ISEMAIL_RFC5322_TOOLONG);
    } else if (elementLength > 63) {
      // http://tools.ietf.org/html/rfc1035#section-2.3.4
      // labels   63 octets or less
      updateResult(ISEMAIL_RFC5322_LABEL_TOOLONG);
    } else if (options.minDomainAtoms && atomList.domain.length <
        options.minDomainAtoms) {
      updateResult(ISEMAIL_ERR_TOOSHORT_DOMAIN);
    } else if (options.tldWhitelist) {
      var tldAtom = atomList.domain[elementCount], tldValid = false, n;
      if (Array.isArray(options.tldWhitelist)) {
        for (i = 0, n = options.tldWhitelist.length; i < n; i++) {
          if (tldAtom === options.tldWhitelist[i]) {
            tldValid = true;
            break;
          }
        }
      } else {
        tldValid = hasOwn.call(options.tldWhitelist, tldAtom);
      }
      if (!tldValid) {
        updateResult(ISEMAIL_ERR_UNKNOWN_TLD);
      }
    }
  } // check for errors

  var dnsPositive = false;

  if (options.checkDNS && maxResult < ISEMAIL_DNSWARN && HAS_REQUIRE) {
    dns || (dns = require('dns'));
    // http://tools.ietf.org/html/rfc5321#section-2.3.5
    //   Names that can
    //   be resolved to MX RRs or address (i.e., A or AAAA) RRs (as discussed
    //   in Section 5) are permitted, as are CNAME RRs whose targets can be
    //   resolved, in turn, to MX or address RRs.
    //
    // http://tools.ietf.org/html/rfc5321#section-5.1
    //   The lookup first attempts to locate an MX record associated with the
    //   name.  If a CNAME record is found, the resulting name is processed as
    //   if it were the initial name. ... If an empty list of MXs is returned,
    //   the address is treated as if it was associated with an implicit MX
    //   RR, with a preference of 0, pointing to that 
    //
    // isEmail() author's note: We will regard the existence of a CNAME to be
    // sufficient evidence of the domain's existence. For performance reasons
    // we will not repeat the DNS lookup for the CNAME's target, but we will
    // raise a warning because we didn't immediately find an MX record.
    if (elementCount === 0) {
      // checking TLD DNS only works if you explicitly check from the root
      parseData.domain += '.';
    }

    var dnsDomain = parseData.domain;
    dns.resolveMx(dnsDomain, function(err, records) {
      if ((err && err.code !== dns.NODATA) || (!err && !records)) {
        updateResult(ISEMAIL_DNSWARN_NO_RECORD);
        return finish();
      }
      if (records && records.length) {
        dnsPositive = true;
        return finish();
      }
      var done = false, count = 3;
      updateResult(ISEMAIL_DNSWARN_NO_MX_RECORD);
      dns.resolveCname(dnsDomain, handleRecords);
      dns.resolve4(dnsDomain, handleRecords);
      dns.resolve6(dnsDomain, handleRecords);
      function handleRecords(err, records) {
        if (done) return;
        count--;
        if (!err && records && records.length) {
          done = true;
          return finish();
        }
        if (count === 0) {
          // no usable records for the domain can be found
          updateResult(ISEMAIL_DNSWARN_NO_RECORD);
          done = true;
          finish();
        }
      }
    });
  } else if (options.checkDNS) {
    // guarantee asynchronicity
    typeof process !== 'undefined' && process &&
      typeof process.nextTick === 'function'
      ? process.nextTick(finish)
      : setTimeout(finish, 1);
  } else {
    return finish();
  } // checkDNS

  function finish() {
    if (!dnsPositive && maxResult < ISEMAIL_DNSWARN) {
      if (elementCount === 0) {
        updateResult(ISEMAIL_RFC5321_TLD);
      } else {
        var charCode = atomList.domain[elementCount].charCodeAt(0);
        if (charCode >= 48 && charCode <= 57) {
          updateResult(ISEMAIL_RFC5321_TLDNUMERIC);
        }
      }
    }

    if (maxResult < threshold) {
      maxResult = ISEMAIL_VALID;
    }

    if (!diagnose) {
      maxResult = maxResult < THRESHOLD;
    }

    if (typeof callback === 'function') {
      callback(maxResult);
    }

    return maxResult;
  } // finish
} // isEmail

module.exports = isEmail;

}).call(this,require('_process'))
},{"_process":"/home/radu/code/react-flex/node_modules/browserify/node_modules/process/browser.js","dns":"/home/radu/code/react-flex/node_modules/browserify/lib/_empty.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/camelize.js":[function(require,module,exports){
'use strict'

var toCamelFn = function(str, letter){
       return letter ? letter.toUpperCase(): ''
   }

var hyphenRe = require('./hyphenRe')

module.exports = function(str){
   return str?
          str.replace(hyphenRe, toCamelFn):
          ''
}
},{"./hyphenRe":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/hyphenRe.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/compactWhitespace.js":[function(require,module,exports){
var RE = /\s+/g

module.exports = function(str){
    if (!str){
        return ''
    }

    return str.trim().replace(RE, ' ')
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/humanize.js":[function(require,module,exports){
'use strict'

var separate     = require('./separate')
var camelize     = require('./camelize')
var toUpperFirst = require('./toUpperFirst')
var hyphenRe     = require('./hyphenRe')

function toLowerAndSpace(str, letter){
    return letter? ' ' + letter.toLowerCase(): ' '
}

module.exports = function(name, config){

    var str = config && config.capitalize?
                    separate(camelize(name), ' '):
                    separate(name, ' ').replace(hyphenRe, toLowerAndSpace)

    return toUpperFirst(str.trim())
}

},{"./camelize":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/camelize.js","./hyphenRe":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/hyphenRe.js","./separate":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/separate.js","./toUpperFirst":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/toUpperFirst.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/hyphenRe.js":[function(require,module,exports){
module.exports = /[-\s]+(.)?/g
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/hyphenate.js":[function(require,module,exports){
'use strict'

var separate = require('./separate')

module.exports = function(name){
   return separate(name).toLowerCase()
}
},{"./separate":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/separate.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/alphanum.js":[function(require,module,exports){
'use strict'

module.exports = require('./match')(/^[a-zA-Z0-9]+$/)
},{"./match":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/match.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/email.js":[function(require,module,exports){
module.exports = require('isemail')
},{"isemail":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/isemail/index.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/guid.js":[function(require,module,exports){
'use strict'

var regex = /^[A-F0-9]{8}(?:-?[A-F0-9]{4}){3}-?[A-F0-9]{12}$/i
var regex2 = /^\{[A-F0-9]{8}(?:-?[A-F0-9]{4}){3}-?[A-F0-9]{12}\}$/i

module.exports = function(value){
    return regex.test(value) || regex2.test(value)
}


},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/index.js":[function(require,module,exports){
module.exports = {
    alphanum: require('./alphanum'),
    match   : require('./match'),
    guid   : require('./guid'),
    email   : require('./email'),
    numeric   : require('./numeric')
}
},{"./alphanum":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/alphanum.js","./email":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/email.js","./guid":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/guid.js","./match":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/match.js","./numeric":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/numeric.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/match.js":[function(require,module,exports){
'use strict'

var F = require('functionally')

module.exports = F.curry(function(re, value){
    return !!re.test(value)
})
},{"functionally":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/functionally/index.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/is/numeric.js":[function(require,module,exports){
'use strict'

module.exports = require('i-s').numeric
},{"i-s":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/node_modules/i-s/index.js"}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/separate.js":[function(require,module,exports){
'use strict'

var doubleColonRe      = /::/g
var upperToLowerRe     = /([A-Z]+)([A-Z][a-z])/g
var lowerToUpperRe     = /([a-z\d])([A-Z])/g
var underscoreToDashRe = /_/g

module.exports = function(name, separator){

   return name?
           name.replace(doubleColonRe, '/')
                .replace(upperToLowerRe, '$1_$2')
                .replace(lowerToUpperRe, '$1_$2')
                .replace(underscoreToDashRe, separator || '-')
            :
            ''
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/stripWhitespace.js":[function(require,module,exports){
var RE = /\s/g

module.exports = function(str){
    if (!str){
        return ''
    }

    return str.replace(RE, '')
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/toLowerFirst.js":[function(require,module,exports){
module.exports = function(str){
    return str.length?
            str.charAt(0).toLowerCase() + str.substring(1):
            str
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/src/toUpperFirst.js":[function(require,module,exports){
'use strict'

module.exports = function(value){
    return value.length?
                value.charAt(0).toUpperCase() + value.substring(1):
                value
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/src/cssPrefix.js":[function(require,module,exports){
module.exports = require('./prefixer')()
},{"./prefixer":"/home/radu/code/react-flex/node_modules/to-style/src/prefixer.js"}],"/home/radu/code/react-flex/node_modules/to-style/src/hasOwn.js":[function(require,module,exports){
'use strict'

var objectHasOwn = Object.prototype.hasOwnProperty

module.exports = function(object, propertyName){
    return objectHasOwn.call(object, propertyName)
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/src/isFunction.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(v) {
    return objectToString.apply(v) === '[object Function]'
}

},{}],"/home/radu/code/react-flex/node_modules/to-style/src/isObject.js":[function(require,module,exports){
'use strict'

var objectToString = Object.prototype.toString

module.exports = function(v){
    return !!v && objectToString.call(v) === '[object Object]'
}


},{}],"/home/radu/code/react-flex/node_modules/to-style/src/prefixInfo.js":[function(require,module,exports){
var toUpperFirst = require('ustring').toUpperFirst

var re         = /^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/

var docStyle   = typeof document == 'undefined'?
                    {}:
                    document.documentElement.style

var prefixInfo = (function(){

    var prefix = (function(){

            for (var prop in docStyle) {
                if( re.test(prop) ) {
                    // test is faster than match, so it's better to perform
                    // that on the lot and match only when necessary
                    return  prop.match(re)[0]
                }
            }

            // Nothing found so far? Webkit does not enumerate over the CSS properties of the style object.
            // However (prop in style) returns the correct value, so we'll have to test for
            // the precence of a specific property
            if ('WebkitOpacity' in docStyle){
                return 'Webkit'
            }

            if ('KhtmlOpacity' in docStyle) {
                return 'Khtml'
            }

            return ''
        })(),

    lower = prefix.toLowerCase()

    return {
        style       : prefix,
        css       : '-' + lower + '-',
        dom       : ({
            Webkit: 'WebKit',
            ms    : 'MS',
            o     : 'WebKit'
        })[prefix] || toUpperFirst(prefix)
    }

})()

module.exports = prefixInfo
},{"ustring":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/index.js"}],"/home/radu/code/react-flex/node_modules/to-style/src/prefixProperties.js":[function(require,module,exports){
module.exports = {
    'border-radius'              : 1,
    'border-top-left-radius'     : 1,
    'border-top-right-radius'    : 1,
    'border-bottom-left-radius'  : 1,
    'border-bottom-right-radius' : 1,
    'box-shadow'                 : 1,
    'order'                      : 1,
    'flex'                       : function(name, prefix){
        return [prefix + 'box-flex']
    },
    'box-flex'                   : 1,
    'box-align'                  : 1,
    'animation'                  : 1,
    'animation-duration'         : 1,
    'animation-name'             : 1,
    'transition'                 : 1,
    'transition-duration'        : 1,
    'transform'                  : 1,
    'transform-style'            : 1,
    'transform-origin'           : 1,
    'backface-visibility'        : 1,
    'perspective'                : 1,
    'box-pack'                   : 1
}
},{}],"/home/radu/code/react-flex/node_modules/to-style/src/prefixer.js":[function(require,module,exports){
'use strict'

var ustring = require('ustring')
var camelize = ustring.camelize
var hyphenate = ustring.hyphenate
var toLowerFirst = ustring.toLowerFirst
var toUpperFirst = ustring.toUpperFirst

var prefixInfo = require('./prefixInfo')
var prefixProperties = require('./prefixProperties')

var docStyle = typeof document == 'undefined'?
                {}:
                document.documentElement.style

module.exports = function(asStylePrefix){

    return function(name, config){
        config = config || {}

        var styleName = toLowerFirst(camelize(name)),
            cssName   = hyphenate(name),

            theName   = asStylePrefix?
                            styleName:
                            cssName,

            thePrefix = prefixInfo.style?
                            asStylePrefix?
                                prefixInfo.style:
                                prefixInfo.css
                            :
                            ''

        if ( styleName in docStyle ) {
            return config.asString?
                              theName :
                            [ theName ]
        }

        //not a valid style name, so we'll return the value with a prefix

        var upperCased     = theName,
            prefixProperty = prefixProperties[cssName],
            result         = []

        if (asStylePrefix){
            upperCased = toUpperFirst(theName)
        }

        if (typeof prefixProperty == 'function'){
            var prefixedCss = prefixProperty(theName, thePrefix) || []
            if (prefixedCss && !Array.isArray(prefixedCss)){
                prefixedCss = [prefixedCss]
            }

            if (prefixedCss.length){
                prefixedCss = prefixedCss.map(function(property){
                    return asStylePrefix?
                                toLowerFirst(camelize(property)):
                                hyphenate(property)

                })
            }

            result = result.concat(prefixedCss)
        }

        if (thePrefix){
            result.push(thePrefix + upperCased)
        }

        result.push(theName)

        if (config.asString || result.length == 1){
            return result[0]
        }

        return result
    }
}
},{"./prefixInfo":"/home/radu/code/react-flex/node_modules/to-style/src/prefixInfo.js","./prefixProperties":"/home/radu/code/react-flex/node_modules/to-style/src/prefixProperties.js","ustring":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/index.js"}],"/home/radu/code/react-flex/node_modules/to-style/src/toStyleObject.js":[function(require,module,exports){
'use strict'

var ustring = require('ustring')

var prefixInfo  = require('./prefixInfo')
var cssPrefixFn = require('./cssPrefix')

var HYPHENATE   = ustring.hyphenate
var HAS_OWN     = require('./hasOwn')
var IS_OBJECT   = require('./isObject')
var IS_FUNCTION = require('./isFunction')

var applyPrefix = function(target, property, value, normalizeFn){
    cssPrefixFn(property).forEach(function(p){
        target[normalizeFn? normalizeFn(p): p] = value
    })
}

var toObject = function(str){
    str = (str || '').split(';')

    var result = {}

    str.forEach(function(item){
        var split = item.split(':')

        if (split.length == 2){
            result[split[0].trim()] = split[1].trim()
        }
    })

    return result
}

/**
 * @ignore
 * @method toStyleObject
 *
 * @param  {Object} styles The object to convert to a style object.
 * @param  {Object} [config]
 * @param  {Boolean} [config.addUnits=true] True if you want to add units when numerical values are encountered.
 * @param  {Object}  config.cssUnitless An object whose keys represent css numerical property names that will not be appended with units.
 * @param  {Object}  config.prefixProperties An object whose keys represent css property names that should be prefixed
 * @param  {String}  config.cssUnit='px' The css unit to append to numerical values. Defaults to 'px'
 * @param  {String}  config.normalizeName A function that normalizes a name to a valid css property name
 * @param  {String}  config.scope
 *
 * @return {Object} The object, normalized with css style names
 */
var TO_STYLE_OBJECT = function(styles, config, prepend, result){

    if (typeof styles == 'string'){
        styles = toObject(styles)
    }

    config = config || {}
    result = result || {}

    var scope    = config.scope || {},

        //configs
        addUnits = config.addUnits != null?
                            config.addUnits:
                            scope && scope.addUnits != null?
                                scope.addUnits:
                                true,

        cssUnitless      = (config.cssUnitless != null?
                                config.cssUnitless:
                                scope?
                                    scope.cssUnitless:
                                    null) || {},
        cssUnit          = (config.cssUnit || scope? scope.cssUnit: null) || 'px',
        prefixProperties = (config.prefixProperties || (scope? scope.prefixProperties: null)) || {},

        normalizeFn = config.normalizeName || HYPHENATE,

        processed,
        styleName,

        propName,
        propValue,
        propCssUnit,
        propType,
        propIsNumber,

        fnPropValue,
        prefix

    for (propName in styles) if (HAS_OWN(styles, propName)) {

        propValue = styles[ propName ]

        //the hyphenated style name (css property name)
        styleName = normalizeFn(prepend? prepend + propName: propName)

        processed = false
        prefix    = false

        if (IS_FUNCTION(propValue)) {

            //a function can either return a css value
            //or an object with { value, prefix, name }
            fnPropValue = propValue.call(scope || styles, propValue, propName, styleName, styles)

            if (IS_OBJECT(fnPropValue) && fnPropValue.value != null){

                propValue = fnPropValue.value
                prefix    = fnPropValue.prefix
                styleName = fnPropValue.name?
                                normalizeFn(fnPropValue.name):
                                styleName

            } else {
                propValue = fnPropValue
            }
        }

        propType     = typeof propValue
        propIsNumber = propType == 'number' || (propType == 'string' && propValue != '' && propValue * 1 == propValue)

        if (propValue == null || styleName == null || styleName === ''){
            continue
        }

        if (propIsNumber || propType == 'string'){
           processed = true
        }

        if (!processed && propValue.value != null && propValue.prefix){
           processed = true
           prefix    = propValue.prefix
           propValue = propValue.value
        }

        if (processed){

            prefix = prefix || !!prefixProperties[styleName]

            if (propIsNumber){
                propValue = addUnits && !(styleName in cssUnitless) ?
                                propValue + cssUnit:
                                propValue + ''//change it to a string, so that jquery does not append px or other units
            }

            //special border treatment
            if (
                    (
                     styleName == 'border' ||
                    (!styleName.indexOf('border')
                        &&
                        !~styleName.indexOf('radius')
                        &&
                        !~styleName.indexOf('width'))
                    ) &&
                    propIsNumber
                ){

                styleName = normalizeFn(styleName + '-width')
            }

            //special border radius treatment
            if (!styleName.indexOf('border-radius-')){
                styleName.replace(/border(-radius)(-(.*))/, function(str, radius, theRest){
                    var positions = {
                        '-top'    : ['-top-left',      '-top-right' ],
                        '-left'   : ['-top-left',    '-bottom-left' ],
                        '-right'  : ['-top-right',   '-bottom-right'],
                        '-bottom' : ['-bottom-left', '-bottom-right']
                    }

                    if (theRest in positions){
                        styleName = []

                        positions[theRest].forEach(function(pos){
                            styleName.push(normalizeFn('border' + pos + radius))
                        })
                    } else {

                        styleName = normalizeFn('border'+ theRest + radius)
                    }

                })

                if (Array.isArray(styleName)){
                    styleName.forEach(function(styleName){
                        if (prefix){
                            applyPrefix(result, styleName, propValue, normalizeFn)
                        } else {
                            result[normalizeFn(styleName)] = propValue
                        }
                    })

                    continue
                }
            }

            if (prefix){
                applyPrefix(result, styleName, propValue, normalizeFn)
            } else {
                result[normalizeFn(styleName)] = propValue
            }

        } else {

            //the propValue must be an object, so go down the hierarchy
            TO_STYLE_OBJECT(propValue, config, styleName + '-', result)
        }
    }

    return result
}

module.exports = TO_STYLE_OBJECT
},{"./cssPrefix":"/home/radu/code/react-flex/node_modules/to-style/src/cssPrefix.js","./hasOwn":"/home/radu/code/react-flex/node_modules/to-style/src/hasOwn.js","./isFunction":"/home/radu/code/react-flex/node_modules/to-style/src/isFunction.js","./isObject":"/home/radu/code/react-flex/node_modules/to-style/src/isObject.js","./prefixInfo":"/home/radu/code/react-flex/node_modules/to-style/src/prefixInfo.js","ustring":"/home/radu/code/react-flex/node_modules/to-style/node_modules/ustring/index.js"}],"/home/radu/code/react-flex/node_modules/to-style/src/toStyleString.js":[function(require,module,exports){
'use strict'

var toStyleObject = require('./toStyleObject')
var hasOwn        = require('./hasOwn')

/**
 * @ignore
 * @method toStyleString
 *
 * @param  {Object} styles The object to convert to a style string.
 * @param  {Object} config
 * @param  {Boolean} config.addUnits=true True if you want to add units when numerical values are encountered. Defaults to true
 * @param  {Object}  config.cssUnitless An object whose keys represent css numerical property names that will not be appended with units.
 * @param  {Object}  config.prefixProperties An object whose keys represent css property names that should be prefixed
 * @param  {String}  config.cssUnit='px' The css unit to append to numerical values. Defaults to 'px'
 * @param  {String}  config.scope
 *
 * @return {Object} The object, normalized with css style names
 */
module.exports = function(styles, config){
    styles = toStyleObject(styles, config)

    var result = []
    var prop

    for(prop in styles) if (hasOwn(styles, prop)){
        result.push(prop + ': ' + styles[prop])
    }

    return result.join('; ')
}
},{"./hasOwn":"/home/radu/code/react-flex/node_modules/to-style/src/hasOwn.js","./toStyleObject":"/home/radu/code/react-flex/node_modules/to-style/src/toStyleObject.js"}],"/home/radu/code/react-flex/src/js/ColumnLayout.js":[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',

    mixins: [require('./common')],

    orientation: 'vertical',

    getInitialState: function(){
        return {}
    },

    render: function(){
        return (
            React.DOM.div({className: "rf-column rf-layout"}, 
                this.renderChildren()
            )
        )
    }
})
},{"./common":"/home/radu/code/react-flex/src/js/common.js"}],"/home/radu/code/react-flex/src/js/ColumnNRow1.js":[function(require,module,exports){
/** @jsx React.DOM */

var RowLayout = require('./RowLayout')
var ColumnLayout = require('./ColumnLayout')

var common         = require('./common')
var renderChildren = common.renderChildren

module.exports = React.createClass({displayName: 'exports',

    mixins: [
        common
    ],

    render: function(){
        var children = this.props.children.concat()

        var rowLayout = RowLayout(null, 
                            children[children.length - 1]
                        )

        var columnLayout = ColumnLayout(null, 
                            children.slice(0, children.length - 1)
                        )

        this.asChildLayout(columnLayout)
        this.asChildLayout(rowLayout)

        return (
            React.DOM.div({className: "rf-layout rf-composite rf-v-column-n-row-1 "+(this.props.horizontal?'rf-horizontal':'rf-vertical')}, 
                this.renderChildren([columnLayout, rowLayout], this)
            )
        )
    },

    asChildLayout: function(layout){
        var defaultProps = common.getDefaultProps()

        Object.keys(defaultProps).forEach(function(key){
            layout.props[key] = layout.props[key] || this.props[key]
        }, this)
    }
})
},{"./ColumnLayout":"/home/radu/code/react-flex/src/js/ColumnLayout.js","./RowLayout":"/home/radu/code/react-flex/src/js/RowLayout.js","./common":"/home/radu/code/react-flex/src/js/common.js"}],"/home/radu/code/react-flex/src/js/Row1ColumnN.js":[function(require,module,exports){
/** @jsx React.DOM */

var RowLayout = require('./RowLayout')
var ColumnLayout = require('./ColumnLayout')

var common         = require('./common')
var renderChildren = common.renderChildren

module.exports = React.createClass({displayName: 'exports',

    mixins: [
        common
    ],

    render: function(){
        var children = this.props.children.concat()

        var rowLayout = RowLayout(null, 
                            children[0]
                        )

        var columnLayout = ColumnLayout(null, 
                            children.slice(1)
                        )

        this.asChildLayout(rowLayout)
        this.asChildLayout(columnLayout)

        return (
            React.DOM.div({className: "rf-layout rf-composite rf-row-1-column-n "+(this.props.horizontal?'rf-horizontal':'rf-vertical')}, 
                this.renderChildren([rowLayout, columnLayout], this)
            )
        )
    },

    asChildLayout: function(layout){
        var defaultProps = common.getDefaultProps()

        Object.keys(defaultProps).forEach(function(key){
            layout.props[key] = layout.props[key] || this.props[key]
        }, this)
    }
})
},{"./ColumnLayout":"/home/radu/code/react-flex/src/js/ColumnLayout.js","./RowLayout":"/home/radu/code/react-flex/src/js/RowLayout.js","./common":"/home/radu/code/react-flex/src/js/common.js"}],"/home/radu/code/react-flex/src/js/RowLayout.js":[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',

    mixins: [
        require('./common')
    ],

    orientation: 'horizontal',

    getInitialState: function(){
        return {}
    },

    render: function(){
        return (
            React.DOM.div({className: "rf-row rf-layout"}, 
                this.renderChildren()
            )
        )
    }
})
},{"./common":"/home/radu/code/react-flex/src/js/common.js"}],"/home/radu/code/react-flex/src/js/common.js":[function(require,module,exports){
var toStyle = require('to-style').object
var isNumeric = require('i-s').numeric

function getBorderSize(layout){
    var bordered   = layout.props.bordered
    var borderSize = bordered?
                        isNumeric(bordered)?
                        bordered: parseInt(bordered, 10) || 1
                        :
                        0

    return borderSize
}

function getFlex(item){
    var flex = item.props.flex

    return isNumeric(flex)?
                parseInt(flex, 10):
                0
}

function itemPadding(item, index, layout){

    var style = {}

    if (layout.props.layoutPadding){
        style.padding = layout.props.layoutPadding
    }
    if (item.props.layoutPadding){
        style.padding = item.props.layoutPadding
    }

    var borderSize = getBorderSize(layout)

    if (borderSize && index){
        var borderPos = layout.orientation == 'vertical'? 'border-top': 'border-left'

        style[borderPos + '-width'] = borderSize
        style[borderPos + '-style'] = 'solid'
    }

    var itemFlex = getFlex(item)

    if (itemFlex && itemFlex > 10){
        style.flex = itemFlex
    }

    return toStyle(style)
}

function itemClass(item, index, layout){
    var result = ['rf-layout-item']

    var borderSize = getBorderSize(layout)
    var itemFlex   = getFlex(item)

    if (itemFlex && itemFlex <= 10){
        result.push('u-flex-' + itemFlex)
    }

    if (borderSize && index){
        result.push('rf-bordered')
    }

    return result.join(' ')
}

module.exports = {

    getDefaultProps: require('./getDefaultProps'),

    renderChildren: require('./renderChildren')(itemClass, itemPadding)
}
},{"./getDefaultProps":"/home/radu/code/react-flex/src/js/getDefaultProps.js","./renderChildren":"/home/radu/code/react-flex/src/js/renderChildren.js","i-s":"/home/radu/code/react-flex/node_modules/i-s/index.js","to-style":"/home/radu/code/react-flex/node_modules/to-style/index.js"}],"/home/radu/code/react-flex/src/js/getDefaultProps.js":[function(require,module,exports){
module.exports = function(){
    return {
        bordered: 1,
        layoutPadding: 0
    }
}
},{}],"/home/radu/code/react-flex/src/js/index.js":[function(require,module,exports){
module.exports = {
    RowLayout   : require('./RowLayout'),
    ColumnLayout: require('./ColumnLayout'),
    Row1ColumnN : require('./Row1ColumnN'),
    ColumnNRow1 : require('./ColumnNRow1')
}
},{"./ColumnLayout":"/home/radu/code/react-flex/src/js/ColumnLayout.js","./ColumnNRow1":"/home/radu/code/react-flex/src/js/ColumnNRow1.js","./Row1ColumnN":"/home/radu/code/react-flex/src/js/Row1ColumnN.js","./RowLayout":"/home/radu/code/react-flex/src/js/RowLayout.js"}],"/home/radu/code/react-flex/src/js/renderChildren.js":[function(require,module,exports){
/** @jsx React.DOM */
module.exports = function(itemClass, itemPadding){
    return function(children, layout){
        if (children && !Array.isArray(children)){
            children = [children]
        }

        return React.Children.map(children || this.props.children, function(item, index){
            return React.DOM.div({className: itemClass(item, index, this), style: itemPadding(item, index, this)}, item)
        }, layout || this)
    }
}
},{}]},{},["/home/radu/code/react-flex/src/js/index.js"])
//# sourceMappingURL=data:application/json;base64,
