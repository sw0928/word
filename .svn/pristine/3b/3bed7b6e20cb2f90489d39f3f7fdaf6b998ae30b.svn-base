package tts.project.livek.ui.activity;

import android.content.Intent;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.chad.library.adapter.base.BaseQuickAdapter;
import com.chad.library.adapter.base.listener.OnItemChildClickListener;
import com.chad.library.adapter.base.listener.OnItemClickListener;
import com.google.gson.Gson;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import butterknife.BindView;
import tts.moudle.api.Host;
import tts.moudle.api.bean.BarBean;
import tts.project.livek.R;
import tts.project.livek.bean.LuZhiBean;
import tts.project.livek.bean.UserBean;
import tts.project.livek.ui.adapter.LuZhiAdapter;
import tts.project.livek.utils.Constant;
import tts.project.livek.utils.Logger;
import tts.project.livek.utils.SpSingleInstance;

public class MyVideoActivity extends BaseActivity implements  SwipeRefreshLayout.OnRefreshListener{
    private List<LuZhiBean.ListBean> data;

    public static final int GET_DATA=0;
    public static final int LOAD_MORE_DATA=1;
    public static final int INIT_DATA=2;
    public static final int DELETE_DATA =3;
    @BindView(R.id.sfl_refresh)
    SwipeRefreshLayout sfl_refresh;
    @BindView(R.id.recycleview)
    RecyclerView recyclerView;
    private int page;
    private LuZhiAdapter adapter;
    private UserBean userBean;
    private int mposition;

    @Override
    protected void initView() {
        userBean = SpSingleInstance.getSpSingleInstance().getUserBean(this);
        startRequestData(GET_DATA);
        setContentView(R.layout.activity_my_video);
        setTitle(new BarBean().setMsg("我的视频"));
//        recyclerView.setHasFixedSize(true);
        sfl_refresh.setOnRefreshListener(this);
        sfl_refresh.setFocusable(false);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.addOnItemTouchListener(new OnItemClickListener() {
            @Override
            public void onSimpleItemClick(BaseQuickAdapter baseQuickAdapter, View view, int i) {
                Intent intent = new Intent(MyVideoActivity.this, PlayerRecordLiveActivity.class);
                List<LuZhiBean.ListBean> list=baseQuickAdapter.getData();
                intent.putExtra(Constant.RECORD_BEAN,list.get(i));
                startActivity(intent);
            }
        });
        recyclerView.addOnItemTouchListener(new OnItemChildClickListener() {
            @Override
            public void onSimpleItemChildClick(BaseQuickAdapter baseQuickAdapter, View view, int i) {
                switch (view.getId()){
                    case R.id.delete:
                        data = baseQuickAdapter.getData();
                        mposition=i;
                        startRequestData(DELETE_DATA);
                        break;
                }
            }
        });
        initAdapter();
    }

    @Override
    public void doIcon() {
        finish();
    }

    @Override
    protected void startRequestData(int index) {
        super.startRequestData(index);
        HashMap<String, String> map = new HashMap<>();
        switch (index) {
            case GET_DATA:
                map.put("uid", userBean.getUser_id());
                map.put("token", userBean.getToken());
                getDataWithPost(GET_DATA, Host.hostUrl + "&c=User&a=live_store",map);
                break;
            case INIT_DATA:
                map.put("uid", userBean.getUser_id());
                map.put("token", userBean.getToken());
                getDataWithPost(INIT_DATA, Host.hostUrl + "&c=User&a=live_store", map);
                break;
            case LOAD_MORE_DATA:
                map.put("uid", userBean.getUser_id());
                map.put("token", userBean.getToken());
                map.put("p",page+"");
                getDataWithPost(LOAD_MORE_DATA, Host.hostUrl + "&c=User&a=live_store",map);
                break;
            case DELETE_DATA:
                map.put("uid", userBean.getUser_id());
                map.put("token", userBean.getToken());
                map.put("live_id",data.get(mposition).getLive_id());
                getDataWithPost(DELETE_DATA, Host.hostUrl + "&c=User&a=del_live_store",map);
                break;
        }
    }


    @Override
    protected void doSuccess(int index, String response) {
        super.doSuccess(index, response);
        List<LuZhiBean> list;
        switch (index) {
            case GET_DATA:
                sfl_refresh.setRefreshing(false);
                Logger.e(response);
                LuZhiBean luZhiBean = new Gson().fromJson(response, LuZhiBean.class);
                adapter.setNewData(luZhiBean.getList());
                if (luZhiBean.getList().size() == 0) {
                    View inflate = View.inflate(this, R.layout.empty_layout, null);
                    TextView viewById = (TextView) inflate.findViewById(R.id.content);
                    viewById.setText("暂时没有录制的视频");
                    adapter.setEmptyView(inflate);
                }
                break;
            case INIT_DATA:
//                mlist.clear();
                LuZhiBean luZhiBean1 = new Gson().fromJson(response, LuZhiBean.class);
//                mlist.addAll(list);
//                adapter.notifyDataSetChanged();
                adapter.setNewData(luZhiBean1.getList());
                break;
            case LOAD_MORE_DATA:
                LuZhiBean luZhiBean2 = new Gson().fromJson(response, LuZhiBean.class);
                adapter.addData(luZhiBean2.getList());
                adapter.loadMoreComplete();
                if (luZhiBean2.getList().size() < 10) {
                    adapter.loadMoreEnd();
                }
                break;
            case DELETE_DATA:
                // 删除成功
                Toast.makeText(this,"删除成功",Toast.LENGTH_SHORT).show();
//                ToastUtils.show(this,"删除成功");
                startRequestData(GET_DATA);
                break;
        }
    }
    private void initAdapter() {
        adapter = new LuZhiAdapter(R.layout.item_lu_zhi_record, new ArrayList<LuZhiBean.ListBean>());
//        adapter.setLoadMoreView(new LoadMoreView() {
//            @Override
//            public int getLayoutId() {
//                return 0;
//            }
//
//            @Override
//            protected int getLoadingViewId() {
//                return 0;
//            }
//
//            @Override
//            protected int getLoadFailViewId() {
//                return 0;
//            }
//
//            @Override
//            protected int getLoadEndViewId() {
//                return 0;
//            }
//        });
        recyclerView.setAdapter(adapter);
        adapter.setEmptyView(View.inflate(this,R.layout.empty_layout,null));

//        adapter.setOnLoadMoreListener(new BaseQuickAdapter.RequestLoadMoreListener() {
//            @Override
//            public void onLoadMoreRequested() {
//                page++;
//                startRequestData(LOAD_MORE_DATA);
//            }
//        });
    }

    @Override
    public void onRefresh() {
        startRequestData(GET_DATA);
        sfl_refresh.setRefreshing(true);
    }
}
